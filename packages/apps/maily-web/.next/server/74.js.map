{"version":3,"file":"74.js","mappings":"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","sources":["webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/version.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/internal/semver.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/internal/global-utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/types.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/diag.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context/context.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/metrics/Metric.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/context.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/context-utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/span_kind.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/status.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context-api.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag-api.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/metrics.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/metrics-api.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/propagation.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/propagation-api.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/trace.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace-api.js","webpack://_N_E/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js","webpack://_N_E/./node_modules/.pnpm/set-cookie-parser@2.7.1/node_modules/set-cookie-parser/lib/set-cookie.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Updates to this file should also be replicated to @opentelemetry/core too.\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport var _globalThis = typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n        ? self\n        : typeof window === 'object'\n            ? window\n            : typeof global === 'object'\n                ? global\n                : {};\n//# sourceMappingURL=globalThis.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nexport var VERSION = '1.9.0';\n//# sourceMappingURL=version.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { VERSION } from '../version';\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(ownVersion) {\n    var acceptedVersions = new Set([ownVersion]);\n    var rejectedVersions = new Set();\n    var myVersionMatch = ownVersion.match(re);\n    if (!myVersionMatch) {\n        // we cannot guarantee compatibility so we always return noop\n        return function () { return false; };\n    }\n    var ownVersionParsed = {\n        major: +myVersionMatch[1],\n        minor: +myVersionMatch[2],\n        patch: +myVersionMatch[3],\n        prerelease: myVersionMatch[4],\n    };\n    // if ownVersion has a prerelease tag, versions must match exactly\n    if (ownVersionParsed.prerelease != null) {\n        return function isExactmatch(globalVersion) {\n            return globalVersion === ownVersion;\n        };\n    }\n    function _reject(v) {\n        rejectedVersions.add(v);\n        return false;\n    }\n    function _accept(v) {\n        acceptedVersions.add(v);\n        return true;\n    }\n    return function isCompatible(globalVersion) {\n        if (acceptedVersions.has(globalVersion)) {\n            return true;\n        }\n        if (rejectedVersions.has(globalVersion)) {\n            return false;\n        }\n        var globalVersionMatch = globalVersion.match(re);\n        if (!globalVersionMatch) {\n            // cannot parse other version\n            // we cannot guarantee compatibility so we always noop\n            return _reject(globalVersion);\n        }\n        var globalVersionParsed = {\n            major: +globalVersionMatch[1],\n            minor: +globalVersionMatch[2],\n            patch: +globalVersionMatch[3],\n            prerelease: globalVersionMatch[4],\n        };\n        // if globalVersion has a prerelease tag, versions must match exactly\n        if (globalVersionParsed.prerelease != null) {\n            return _reject(globalVersion);\n        }\n        // major versions must match\n        if (ownVersionParsed.major !== globalVersionParsed.major) {\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.major === 0) {\n            if (ownVersionParsed.minor === globalVersionParsed.minor &&\n                ownVersionParsed.patch <= globalVersionParsed.patch) {\n                return _accept(globalVersion);\n            }\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n            return _accept(globalVersion);\n        }\n        return _reject(globalVersion);\n    };\n}\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport var isCompatible = _makeCompatibilityCheck(VERSION);\n//# sourceMappingURL=semver.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _globalThis } from '../platform';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\nvar major = VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\nvar _global = _globalThis;\nexport function registerGlobal(type, instance, diag, allowOverride) {\n    var _a;\n    if (allowOverride === void 0) { allowOverride = false; }\n    var api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n        version: VERSION,\n    });\n    if (!allowOverride && api[type]) {\n        // already registered an API of this type\n        var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    if (api.version !== VERSION) {\n        // All registered APIs must be of the same version exactly\n        var err = new Error(\"@opentelemetry/api: Registration of version v\" + api.version + \" for \" + type + \" does not match previously registered API v\" + VERSION);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    api[type] = instance;\n    diag.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + VERSION + \".\");\n    return true;\n}\nexport function getGlobal(type) {\n    var _a, _b;\n    var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n    if (!globalVersion || !isCompatible(globalVersion)) {\n        return;\n    }\n    return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nexport function unregisterGlobal(type, diag) {\n    diag.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + VERSION + \".\");\n    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n    if (api) {\n        delete api[type];\n    }\n}\n//# sourceMappingURL=global-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { getGlobal } from '../internal/global-utils';\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nvar DiagComponentLogger = /** @class */ (function () {\n    function DiagComponentLogger(props) {\n        this._namespace = props.namespace || 'DiagComponentLogger';\n    }\n    DiagComponentLogger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('debug', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('error', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('info', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('warn', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.verbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('verbose', this._namespace, args);\n    };\n    return DiagComponentLogger;\n}());\nexport { DiagComponentLogger };\nfunction logProxy(funcName, namespace, args) {\n    var logger = getGlobal('diag');\n    // shortcut if logger not set\n    if (!logger) {\n        return;\n    }\n    args.unshift(namespace);\n    return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n}\n//# sourceMappingURL=ComponentLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nexport var DiagLogLevel;\n(function (DiagLogLevel) {\n    /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n    DiagLogLevel[DiagLogLevel[\"NONE\"] = 0] = \"NONE\";\n    /** Identifies an error scenario */\n    DiagLogLevel[DiagLogLevel[\"ERROR\"] = 30] = \"ERROR\";\n    /** Identifies a warning scenario */\n    DiagLogLevel[DiagLogLevel[\"WARN\"] = 50] = \"WARN\";\n    /** General informational log message */\n    DiagLogLevel[DiagLogLevel[\"INFO\"] = 60] = \"INFO\";\n    /** General debug log message */\n    DiagLogLevel[DiagLogLevel[\"DEBUG\"] = 70] = \"DEBUG\";\n    /**\n     * Detailed trace level logging should only be used for development, should only be set\n     * in a development environment.\n     */\n    DiagLogLevel[DiagLogLevel[\"VERBOSE\"] = 80] = \"VERBOSE\";\n    /** Used to set the logging level to include all logging */\n    DiagLogLevel[DiagLogLevel[\"ALL\"] = 9999] = \"ALL\";\n})(DiagLogLevel || (DiagLogLevel = {}));\n//# sourceMappingURL=types.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '../types';\nexport function createLogLevelDiagLogger(maxLevel, logger) {\n    if (maxLevel < DiagLogLevel.NONE) {\n        maxLevel = DiagLogLevel.NONE;\n    }\n    else if (maxLevel > DiagLogLevel.ALL) {\n        maxLevel = DiagLogLevel.ALL;\n    }\n    // In case the logger is null or undefined\n    logger = logger || {};\n    function _filterFunc(funcName, theLevel) {\n        var theFunc = logger[funcName];\n        if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n            return theFunc.bind(logger);\n        }\n        return function () { };\n    }\n    return {\n        error: _filterFunc('error', DiagLogLevel.ERROR),\n        warn: _filterFunc('warn', DiagLogLevel.WARN),\n        info: _filterFunc('info', DiagLogLevel.INFO),\n        debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n        verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),\n    };\n}\n//# sourceMappingURL=logLevelLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport { DiagLogLevel, } from '../diag/types';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */ (function () {\n    /**\n     * Private internal constructor\n     * @private\n     */\n    function DiagAPI() {\n        function _logProxy(funcName) {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var logger = getGlobal('diag');\n                // shortcut if logger not set\n                if (!logger)\n                    return;\n                return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n            };\n        }\n        // Using self local variable for minification purposes as 'this' cannot be minified\n        var self = this;\n        // DiagAPI specific functions\n        var setLogger = function (logger, optionsOrLogLevel) {\n            var _a, _b, _c;\n            if (optionsOrLogLevel === void 0) { optionsOrLogLevel = { logLevel: DiagLogLevel.INFO }; }\n            if (logger === self) {\n                // There isn't much we can do here.\n                // Logging to the console might break the user application.\n                // Try to log to self. If a logger was previously registered it will receive the log.\n                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n                return false;\n            }\n            if (typeof optionsOrLogLevel === 'number') {\n                optionsOrLogLevel = {\n                    logLevel: optionsOrLogLevel,\n                };\n            }\n            var oldLogger = getGlobal('diag');\n            var newLogger = createLogLevelDiagLogger((_b = optionsOrLogLevel.logLevel) !== null && _b !== void 0 ? _b : DiagLogLevel.INFO, logger);\n            // There already is an logger registered. We'll let it know before overwriting it.\n            if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n                var stack = (_c = new Error().stack) !== null && _c !== void 0 ? _c : '<failed to generate stacktrace>';\n                oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n                newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n            }\n            return registerGlobal('diag', newLogger, self, true);\n        };\n        self.setLogger = setLogger;\n        self.disable = function () {\n            unregisterGlobal(API_NAME, self);\n        };\n        self.createComponentLogger = function (options) {\n            return new DiagComponentLogger(options);\n        };\n        self.verbose = _logProxy('verbose');\n        self.debug = _logProxy('debug');\n        self.info = _logProxy('info');\n        self.warn = _logProxy('warn');\n        self.error = _logProxy('error');\n    }\n    /** Get the singleton instance of the DiagAPI API */\n    DiagAPI.instance = function () {\n        if (!this._instance) {\n            this._instance = new DiagAPI();\n        }\n        return this._instance;\n    };\n    return DiagAPI;\n}());\nexport { DiagAPI };\n//# sourceMappingURL=diag.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar BaggageImpl = /** @class */ (function () {\n    function BaggageImpl(entries) {\n        this._entries = entries ? new Map(entries) : new Map();\n    }\n    BaggageImpl.prototype.getEntry = function (key) {\n        var entry = this._entries.get(key);\n        if (!entry) {\n            return undefined;\n        }\n        return Object.assign({}, entry);\n    };\n    BaggageImpl.prototype.getAllEntries = function () {\n        return Array.from(this._entries.entries()).map(function (_a) {\n            var _b = __read(_a, 2), k = _b[0], v = _b[1];\n            return [k, v];\n        });\n    };\n    BaggageImpl.prototype.setEntry = function (key, entry) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.set(key, entry);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntry = function (key) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.delete(key);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntries = function () {\n        var e_1, _a;\n        var keys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            keys[_i] = arguments[_i];\n        }\n        var newBaggage = new BaggageImpl(this._entries);\n        try {\n            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n                var key = keys_1_1.value;\n                newBaggage._entries.delete(key);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return newBaggage;\n    };\n    BaggageImpl.prototype.clear = function () {\n        return new BaggageImpl();\n    };\n    return BaggageImpl;\n}());\nexport { BaggageImpl };\n//# sourceMappingURL=baggage-impl.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nexport var baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n//# sourceMappingURL=symbol.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagAPI } from '../api/diag';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\nvar diag = DiagAPI.instance();\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(entries) {\n    if (entries === void 0) { entries = {}; }\n    return new BaggageImpl(new Map(Object.entries(entries)));\n}\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(str) {\n    if (typeof str !== 'string') {\n        diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n        str = '';\n    }\n    return {\n        __TYPE__: baggageEntryMetadataSymbol,\n        toString: function () {\n            return str;\n        },\n    };\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description) {\n    // The specification states that for the same input, multiple calls should\n    // return different keys. Due to the nature of the JS dependency management\n    // system, this creates problems where multiple versions of some package\n    // could hold different keys for the same property.\n    //\n    // Therefore, we use Symbol.for which returns the same key for the same input.\n    return Symbol.for(description);\n}\nvar BaseContext = /** @class */ (function () {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    function BaseContext(parentContext) {\n        // for minification\n        var self = this;\n        self._currentContext = parentContext ? new Map(parentContext) : new Map();\n        self.getValue = function (key) { return self._currentContext.get(key); };\n        self.setValue = function (key, value) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.set(key, value);\n            return context;\n        };\n        self.deleteValue = function (key) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.delete(key);\n            return context;\n        };\n    }\n    return BaseContext;\n}());\n/** The root context is used as the default parent context when there is no active context */\nexport var ROOT_CONTEXT = new BaseContext();\n//# sourceMappingURL=context.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar consoleMap = [\n    { n: 'error', c: 'error' },\n    { n: 'warn', c: 'warn' },\n    { n: 'info', c: 'info' },\n    { n: 'debug', c: 'debug' },\n    { n: 'verbose', c: 'trace' },\n];\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nvar DiagConsoleLogger = /** @class */ (function () {\n    function DiagConsoleLogger() {\n        function _consoleFunc(funcName) {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                if (console) {\n                    // Some environments only expose the console when the F12 developer console is open\n                    // eslint-disable-next-line no-console\n                    var theFunc = console[funcName];\n                    if (typeof theFunc !== 'function') {\n                        // Not all environments support all functions\n                        // eslint-disable-next-line no-console\n                        theFunc = console.log;\n                    }\n                    // One last final check\n                    if (typeof theFunc === 'function') {\n                        return theFunc.apply(console, args);\n                    }\n                }\n            };\n        }\n        for (var i = 0; i < consoleMap.length; i++) {\n            this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n        }\n    }\n    return DiagConsoleLogger;\n}());\nexport { DiagConsoleLogger };\n//# sourceMappingURL=consoleLogger.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nvar NoopMeter = /** @class */ (function () {\n    function NoopMeter() {\n    }\n    /**\n     * @see {@link Meter.createGauge}\n     */\n    NoopMeter.prototype.createGauge = function (_name, _options) {\n        return NOOP_GAUGE_METRIC;\n    };\n    /**\n     * @see {@link Meter.createHistogram}\n     */\n    NoopMeter.prototype.createHistogram = function (_name, _options) {\n        return NOOP_HISTOGRAM_METRIC;\n    };\n    /**\n     * @see {@link Meter.createCounter}\n     */\n    NoopMeter.prototype.createCounter = function (_name, _options) {\n        return NOOP_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createUpDownCounter}\n     */\n    NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n        return NOOP_UP_DOWN_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableGauge}\n     */\n    NoopMeter.prototype.createObservableGauge = function (_name, _options) {\n        return NOOP_OBSERVABLE_GAUGE_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableCounter}\n     */\n    NoopMeter.prototype.createObservableCounter = function (_name, _options) {\n        return NOOP_OBSERVABLE_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableUpDownCounter}\n     */\n    NoopMeter.prototype.createObservableUpDownCounter = function (_name, _options) {\n        return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.addBatchObservableCallback}\n     */\n    NoopMeter.prototype.addBatchObservableCallback = function (_callback, _observables) { };\n    /**\n     * @see {@link Meter.removeBatchObservableCallback}\n     */\n    NoopMeter.prototype.removeBatchObservableCallback = function (_callback) { };\n    return NoopMeter;\n}());\nexport { NoopMeter };\nvar NoopMetric = /** @class */ (function () {\n    function NoopMetric() {\n    }\n    return NoopMetric;\n}());\nexport { NoopMetric };\nvar NoopCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopCounterMetric, _super);\n    function NoopCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopCounterMetric.prototype.add = function (_value, _attributes) { };\n    return NoopCounterMetric;\n}(NoopMetric));\nexport { NoopCounterMetric };\nvar NoopUpDownCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopUpDownCounterMetric, _super);\n    function NoopUpDownCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopUpDownCounterMetric.prototype.add = function (_value, _attributes) { };\n    return NoopUpDownCounterMetric;\n}(NoopMetric));\nexport { NoopUpDownCounterMetric };\nvar NoopGaugeMetric = /** @class */ (function (_super) {\n    __extends(NoopGaugeMetric, _super);\n    function NoopGaugeMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopGaugeMetric.prototype.record = function (_value, _attributes) { };\n    return NoopGaugeMetric;\n}(NoopMetric));\nexport { NoopGaugeMetric };\nvar NoopHistogramMetric = /** @class */ (function (_super) {\n    __extends(NoopHistogramMetric, _super);\n    function NoopHistogramMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopHistogramMetric.prototype.record = function (_value, _attributes) { };\n    return NoopHistogramMetric;\n}(NoopMetric));\nexport { NoopHistogramMetric };\nvar NoopObservableMetric = /** @class */ (function () {\n    function NoopObservableMetric() {\n    }\n    NoopObservableMetric.prototype.addCallback = function (_callback) { };\n    NoopObservableMetric.prototype.removeCallback = function (_callback) { };\n    return NoopObservableMetric;\n}());\nexport { NoopObservableMetric };\nvar NoopObservableCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableCounterMetric, _super);\n    function NoopObservableCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableCounterMetric;\n}(NoopObservableMetric));\nexport { NoopObservableCounterMetric };\nvar NoopObservableGaugeMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableGaugeMetric, _super);\n    function NoopObservableGaugeMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableGaugeMetric;\n}(NoopObservableMetric));\nexport { NoopObservableGaugeMetric };\nvar NoopObservableUpDownCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableUpDownCounterMetric, _super);\n    function NoopObservableUpDownCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableUpDownCounterMetric;\n}(NoopObservableMetric));\nexport { NoopObservableUpDownCounterMetric };\nexport var NOOP_METER = new NoopMeter();\n// Synchronous instruments\nexport var NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport var NOOP_GAUGE_METRIC = new NoopGaugeMetric();\nexport var NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport var NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n// Asynchronous instruments\nexport var NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nexport var NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nexport var NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();\n/**\n * Create a no-op Meter\n */\nexport function createNoopMeter() {\n    return NOOP_METER;\n}\n//# sourceMappingURL=NoopMeter.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Type of value. It describes how the data is reported. */\nexport var ValueType;\n(function (ValueType) {\n    ValueType[ValueType[\"INT\"] = 0] = \"INT\";\n    ValueType[ValueType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n})(ValueType || (ValueType = {}));\n//# sourceMappingURL=Metric.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var defaultTextMapGetter = {\n    get: function (carrier, key) {\n        if (carrier == null) {\n            return undefined;\n        }\n        return carrier[key];\n    },\n    keys: function (carrier) {\n        if (carrier == null) {\n            return [];\n        }\n        return Object.keys(carrier);\n    },\n};\nexport var defaultTextMapSetter = {\n    set: function (carrier, key, value) {\n        if (carrier == null) {\n            return;\n        }\n        carrier[key] = value;\n    },\n};\n//# sourceMappingURL=TextMapPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { ROOT_CONTEXT } from './context';\nvar NoopContextManager = /** @class */ (function () {\n    function NoopContextManager() {\n    }\n    NoopContextManager.prototype.active = function () {\n        return ROOT_CONTEXT;\n    };\n    NoopContextManager.prototype.with = function (_context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return fn.call.apply(fn, __spreadArray([thisArg], __read(args), false));\n    };\n    NoopContextManager.prototype.bind = function (_context, target) {\n        return target;\n    };\n    NoopContextManager.prototype.enable = function () {\n        return this;\n    };\n    NoopContextManager.prototype.disable = function () {\n        return this;\n    };\n    return NoopContextManager;\n}());\nexport { NoopContextManager };\n//# sourceMappingURL=NoopContextManager.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function ContextAPI() {\n    }\n    /** Get the singleton instance of the Context API */\n    ContextAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new ContextAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current context manager.\n     *\n     * @returns true if the context manager was successfully registered, else false\n     */\n    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n        return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n    };\n    /**\n     * Get the currently active context\n     */\n    ContextAPI.prototype.active = function () {\n        return this._getContextManager().active();\n    };\n    /**\n     * Execute a function with an active context\n     *\n     * @param context context to be active during function execution\n     * @param fn function to execute in a context\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    ContextAPI.prototype.with = function (context, fn, thisArg) {\n        var _a;\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], __read(args), false));\n    };\n    /**\n     * Bind a context to a target function or event emitter\n     *\n     * @param context context to bind to the event emitter or function. Defaults to the currently active context\n     * @param target function or event emitter to bind\n     */\n    ContextAPI.prototype.bind = function (context, target) {\n        return this._getContextManager().bind(context, target);\n    };\n    ContextAPI.prototype._getContextManager = function () {\n        return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n    };\n    /** Disable and remove the global context manager */\n    ContextAPI.prototype.disable = function () {\n        this._getContextManager().disable();\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    return ContextAPI;\n}());\nexport { ContextAPI };\n//# sourceMappingURL=context.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var TraceFlags;\n(function (TraceFlags) {\n    /** Represents no flag set. */\n    TraceFlags[TraceFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Bit to represent whether trace is sampled in trace flags. */\n    TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\n})(TraceFlags || (TraceFlags = {}));\n//# sourceMappingURL=trace_flags.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TraceFlags } from './trace_flags';\nexport var INVALID_SPANID = '0000000000000000';\nexport var INVALID_TRACEID = '00000000000000000000000000000000';\nexport var INVALID_SPAN_CONTEXT = {\n    traceId: INVALID_TRACEID,\n    spanId: INVALID_SPANID,\n    traceFlags: TraceFlags.NONE,\n};\n//# sourceMappingURL=invalid-span-constants.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = /** @class */ (function () {\n    function NonRecordingSpan(_spanContext) {\n        if (_spanContext === void 0) { _spanContext = INVALID_SPAN_CONTEXT; }\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    NonRecordingSpan.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n        return this;\n    };\n    NonRecordingSpan.prototype.addLink = function (_link) {\n        return this;\n    };\n    NonRecordingSpan.prototype.addLinks = function (_links) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setStatus = function (_status) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.updateName = function (_name) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.end = function (_endTime) { };\n    // isRecording always returns false for NonRecordingSpan.\n    NonRecordingSpan.prototype.isRecording = function () {\n        return false;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.recordException = function (_exception, _time) { };\n    return NonRecordingSpan;\n}());\nexport { NonRecordingSpan };\n//# sourceMappingURL=NonRecordingSpan.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '../context/context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { ContextAPI } from '../api/context';\n/**\n * span key\n */\nvar SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nexport function getSpan(context) {\n    return context.getValue(SPAN_KEY) || undefined;\n}\n/**\n * Gets the span from the current context, if one exists.\n */\nexport function getActiveSpan() {\n    return getSpan(ContextAPI.getInstance().active());\n}\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nexport function setSpan(context, span) {\n    return context.setValue(SPAN_KEY, span);\n}\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nexport function deleteSpan(context) {\n    return context.deleteValue(SPAN_KEY);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nexport function setSpanContext(context, spanContext) {\n    return setSpan(context, new NonRecordingSpan(spanContext));\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nexport function getSpanContext(context) {\n    var _a;\n    return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();\n}\n//# sourceMappingURL=context-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPANID, INVALID_TRACEID } from './invalid-span-constants';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nvar VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nvar VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nexport function isValidTraceId(traceId) {\n    return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\nexport function isValidSpanId(spanId) {\n    return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nexport function isSpanContextValid(spanContext) {\n    return (isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId));\n}\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nexport function wrapSpanContext(spanContext) {\n    return new NonRecordingSpan(spanContext);\n}\n//# sourceMappingURL=spancontext-utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ContextAPI } from '../api/context';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { isSpanContextValid } from './spancontext-utils';\nvar contextApi = ContextAPI.getInstance();\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */ (function () {\n    function NoopTracer() {\n    }\n    // startSpan starts a noop span.\n    NoopTracer.prototype.startSpan = function (name, options, context) {\n        if (context === void 0) { context = contextApi.active(); }\n        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n        if (root) {\n            return new NonRecordingSpan();\n        }\n        var parentFromContext = context && getSpanContext(context);\n        if (isSpanContext(parentFromContext) &&\n            isSpanContextValid(parentFromContext)) {\n            return new NonRecordingSpan(parentFromContext);\n        }\n        else {\n            return new NonRecordingSpan();\n        }\n    };\n    NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : contextApi.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = setSpan(parentContext, span);\n        return contextApi.with(contextWithSpanSet, fn, undefined, span);\n    };\n    return NoopTracer;\n}());\nexport { NoopTracer };\nfunction isSpanContext(spanContext) {\n    return (typeof spanContext === 'object' &&\n        typeof spanContext['spanId'] === 'string' &&\n        typeof spanContext['traceId'] === 'string' &&\n        typeof spanContext['traceFlags'] === 'number');\n}\n//# sourceMappingURL=NoopTracer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\nvar NOOP_TRACER = new NoopTracer();\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */ (function () {\n    function ProxyTracer(_provider, name, version, options) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n        this.options = options;\n    }\n    ProxyTracer.prototype.startSpan = function (name, options, context) {\n        return this._getTracer().startSpan(name, options, context);\n    };\n    ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n        var tracer = this._getTracer();\n        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n    };\n    /**\n     * Try to get a tracer from the proxy tracer provider.\n     * If the proxy tracer provider has no delegate, return a noop tracer.\n     */\n    ProxyTracer.prototype._getTracer = function () {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);\n        if (!tracer) {\n            return NOOP_TRACER;\n        }\n        this._delegate = tracer;\n        return this._delegate;\n    };\n    return ProxyTracer;\n}());\nexport { ProxyTracer };\n//# sourceMappingURL=ProxyTracer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nvar NoopTracerProvider = /** @class */ (function () {\n    function NoopTracerProvider() {\n    }\n    NoopTracerProvider.prototype.getTracer = function (_name, _version, _options) {\n        return new NoopTracer();\n    };\n    return NoopTracerProvider;\n}());\nexport { NoopTracerProvider };\n//# sourceMappingURL=NoopTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nvar NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */ (function () {\n    function ProxyTracerProvider() {\n    }\n    /**\n     * Get a {@link ProxyTracer}\n     */\n    ProxyTracerProvider.prototype.getTracer = function (name, version, options) {\n        var _a;\n        return ((_a = this.getDelegateTracer(name, version, options)) !== null && _a !== void 0 ? _a : new ProxyTracer(this, name, version, options));\n    };\n    ProxyTracerProvider.prototype.getDelegate = function () {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n    };\n    /**\n     * Set the delegate tracer provider\n     */\n    ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n        this._delegate = delegate;\n    };\n    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version, options) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version, options);\n    };\n    return ProxyTracerProvider;\n}());\nexport { ProxyTracerProvider };\n//# sourceMappingURL=ProxyTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport var SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=SamplingResult.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var SpanKind;\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind || (SpanKind = {}));\n//# sourceMappingURL=span_kind.js.map","/**\n * An enumeration of status codes.\n */\nexport var SpanStatusCode;\n(function (SpanStatusCode) {\n    /**\n     * The default status.\n     */\n    SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n    /**\n     * The operation has been validated by an Application developer or\n     * Operator to have completed successfully.\n     */\n    SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n    /**\n     * The operation contains an error.\n     */\n    SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(SpanStatusCode || (SpanStatusCode = {}));\n//# sourceMappingURL=status.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nvar VALID_KEY = \"[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,255}\";\nvar VALID_VENDOR_KEY = \"[a-z0-9]\" + VALID_KEY_CHAR_RANGE + \"{0,240}@[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,13}\";\nvar VALID_KEY_REGEX = new RegExp(\"^(?:\" + VALID_KEY + \"|\" + VALID_VENDOR_KEY + \")$\");\nvar VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nvar INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\n//# sourceMappingURL=tracestate-validators.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { validateKey, validateValue } from './tracestate-validators';\nvar MAX_TRACE_STATE_ITEMS = 32;\nvar MAX_TRACE_STATE_LEN = 512;\nvar LIST_MEMBERS_SEPARATOR = ',';\nvar LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nvar TraceStateImpl = /** @class */ (function () {\n    function TraceStateImpl(rawTraceState) {\n        this._internalState = new Map();\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    TraceStateImpl.prototype.set = function (key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        var traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n            traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n    };\n    TraceStateImpl.prototype.unset = function (key) {\n        var traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n    };\n    TraceStateImpl.prototype.get = function (key) {\n        return this._internalState.get(key);\n    };\n    TraceStateImpl.prototype.serialize = function () {\n        var _this = this;\n        return this._keys()\n            .reduce(function (agg, key) {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    };\n    TraceStateImpl.prototype._parse = function (rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce(function (agg, part) {\n            var listMember = part.trim(); // Optional Whitespace (OWS) handling\n            var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                var key = listMember.slice(0, i);\n                var value = listMember.slice(i + 1, part.length);\n                if (validateKey(key) && validateValue(value)) {\n                    agg.set(key, value);\n                }\n                else {\n                    // TODO: Consider to add warning log\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    };\n    TraceStateImpl.prototype._keys = function () {\n        return Array.from(this._internalState.keys()).reverse();\n    };\n    TraceStateImpl.prototype._clone = function () {\n        var traceState = new TraceStateImpl();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n    };\n    return TraceStateImpl;\n}());\nexport { TraceStateImpl };\n//# sourceMappingURL=tracestate-impl.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TraceStateImpl } from './tracestate-impl';\nexport function createTraceState(rawTraceState) {\n    return new TraceStateImpl(rawTraceState);\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { ContextAPI } from './api/context';\n/** Entrypoint for context API */\nexport var context = ContextAPI.getInstance();\n//# sourceMappingURL=context-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { DiagAPI } from './api/diag';\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexport var diag = DiagAPI.instance();\n//# sourceMappingURL=diag-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER } from './NoopMeter';\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nvar NoopMeterProvider = /** @class */ (function () {\n    function NoopMeterProvider() {\n    }\n    NoopMeterProvider.prototype.getMeter = function (_name, _version, _options) {\n        return NOOP_METER;\n    };\n    return NoopMeterProvider;\n}());\nexport { NoopMeterProvider };\nexport var NOOP_METER_PROVIDER = new NoopMeterProvider();\n//# sourceMappingURL=NoopMeterProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER_PROVIDER } from '../metrics/NoopMeterProvider';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'metrics';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function MetricsAPI() {\n    }\n    /** Get the singleton instance of the Metrics API */\n    MetricsAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new MetricsAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global meter provider.\n     * Returns true if the meter provider was successfully registered, else false.\n     */\n    MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n        return registerGlobal(API_NAME, provider, DiagAPI.instance());\n    };\n    /**\n     * Returns the global meter provider.\n     */\n    MetricsAPI.prototype.getMeterProvider = function () {\n        return getGlobal(API_NAME) || NOOP_METER_PROVIDER;\n    };\n    /**\n     * Returns a meter from the global meter provider.\n     */\n    MetricsAPI.prototype.getMeter = function (name, version, options) {\n        return this.getMeterProvider().getMeter(name, version, options);\n    };\n    /** Remove the global meter provider */\n    MetricsAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    return MetricsAPI;\n}());\nexport { MetricsAPI };\n//# sourceMappingURL=metrics.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { MetricsAPI } from './api/metrics';\n/** Entrypoint for metrics API */\nexport var metrics = MetricsAPI.getInstance();\n//# sourceMappingURL=metrics-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nvar NoopTextMapPropagator = /** @class */ (function () {\n    function NoopTextMapPropagator() {\n    }\n    /** Noop inject function does nothing */\n    NoopTextMapPropagator.prototype.inject = function (_context, _carrier) { };\n    /** Noop extract function does nothing and returns the input context */\n    NoopTextMapPropagator.prototype.extract = function (context, _carrier) {\n        return context;\n    };\n    NoopTextMapPropagator.prototype.fields = function () {\n        return [];\n    };\n    return NoopTextMapPropagator;\n}());\nexport { NoopTextMapPropagator };\n//# sourceMappingURL=NoopTextMapPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ContextAPI } from '../api/context';\nimport { createContextKey } from '../context/context';\n/**\n * Baggage key\n */\nvar BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getBaggage(context) {\n    return context.getValue(BAGGAGE_KEY) || undefined;\n}\n/**\n * Retrieve the current baggage from the active/current context\n *\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getActiveBaggage() {\n    return getBaggage(ContextAPI.getInstance().active());\n}\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nexport function setBaggage(context, baggage) {\n    return context.setValue(BAGGAGE_KEY, baggage);\n}\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nexport function deleteBaggage(context) {\n    return context.deleteValue(BAGGAGE_KEY);\n}\n//# sourceMappingURL=context-helpers.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport { defaultTextMapGetter, defaultTextMapSetter, } from '../propagation/TextMapPropagator';\nimport { getBaggage, getActiveBaggage, setBaggage, deleteBaggage, } from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function PropagationAPI() {\n        this.createBaggage = createBaggage;\n        this.getBaggage = getBaggage;\n        this.getActiveBaggage = getActiveBaggage;\n        this.setBaggage = setBaggage;\n        this.deleteBaggage = deleteBaggage;\n    }\n    /** Get the singleton instance of the Propagator API */\n    PropagationAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current propagator.\n     *\n     * @returns true if the propagator was successfully registered, else false\n     */\n    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n        return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n    };\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param context Context carrying tracing data to inject\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     */\n    PropagationAPI.prototype.inject = function (context, carrier, setter) {\n        if (setter === void 0) { setter = defaultTextMapSetter; }\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    };\n    /**\n     * Extract context from a carrier\n     *\n     * @param context Context which the newly created context will inherit from\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     */\n    PropagationAPI.prototype.extract = function (context, carrier, getter) {\n        if (getter === void 0) { getter = defaultTextMapGetter; }\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    };\n    /**\n     * Return a list of all fields which may be used by the propagator.\n     */\n    PropagationAPI.prototype.fields = function () {\n        return this._getGlobalPropagator().fields();\n    };\n    /** Remove the global propagator */\n    PropagationAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    PropagationAPI.prototype._getGlobalPropagator = function () {\n        return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n    };\n    return PropagationAPI;\n}());\nexport { PropagationAPI };\n//# sourceMappingURL=propagation.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { PropagationAPI } from './api/propagation';\n/** Entrypoint for propagation API */\nexport var propagation = PropagationAPI.getInstance();\n//# sourceMappingURL=propagation-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport { isSpanContextValid, wrapSpanContext, } from '../trace/spancontext-utils';\nimport { deleteSpan, getActiveSpan, getSpan, getSpanContext, setSpan, setSpanContext, } from '../trace/context-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function TraceAPI() {\n        this._proxyTracerProvider = new ProxyTracerProvider();\n        this.wrapSpanContext = wrapSpanContext;\n        this.isSpanContextValid = isSpanContextValid;\n        this.deleteSpan = deleteSpan;\n        this.getSpan = getSpan;\n        this.getActiveSpan = getActiveSpan;\n        this.getSpanContext = getSpanContext;\n        this.setSpan = setSpan;\n        this.setSpanContext = setSpanContext;\n    }\n    /** Get the singleton instance of the Trace API */\n    TraceAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global tracer.\n     *\n     * @returns true if the tracer provider was successfully registered, else false\n     */\n    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n        var success = registerGlobal(API_NAME, this._proxyTracerProvider, DiagAPI.instance());\n        if (success) {\n            this._proxyTracerProvider.setDelegate(provider);\n        }\n        return success;\n    };\n    /**\n     * Returns the global tracer provider.\n     */\n    TraceAPI.prototype.getTracerProvider = function () {\n        return getGlobal(API_NAME) || this._proxyTracerProvider;\n    };\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    TraceAPI.prototype.getTracer = function (name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    };\n    /** Remove the global tracer provider */\n    TraceAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n        this._proxyTracerProvider = new ProxyTracerProvider();\n    };\n    return TraceAPI;\n}());\nexport { TraceAPI };\n//# sourceMappingURL=trace.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { TraceAPI } from './api/trace';\n/** Entrypoint for trace API */\nexport var trace = TraceAPI.getInstance();\n//# sourceMappingURL=trace-api.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport { baggageEntryMetadataFromString } from './baggage/utils';\n// Context APIs\nexport { createContextKey, ROOT_CONTEXT } from './context/context';\n// Diag APIs\nexport { DiagConsoleLogger } from './diag/consoleLogger';\nexport { DiagLogLevel, } from './diag/types';\n// Metrics APIs\nexport { createNoopMeter } from './metrics/NoopMeter';\nexport { ValueType, } from './metrics/Metric';\n// Propagation APIs\nexport { defaultTextMapGetter, defaultTextMapSetter, } from './propagation/TextMapPropagator';\nexport { ProxyTracer } from './trace/ProxyTracer';\nexport { ProxyTracerProvider } from './trace/ProxyTracerProvider';\nexport { SamplingDecision } from './trace/SamplingResult';\nexport { SpanKind } from './trace/span_kind';\nexport { SpanStatusCode } from './trace/status';\nexport { TraceFlags } from './trace/trace_flags';\nexport { createTraceState } from './trace/internal/utils';\nexport { isSpanContextValid, isValidTraceId, isValidSpanId, } from './trace/spancontext-utils';\nexport { INVALID_SPANID, INVALID_TRACEID, INVALID_SPAN_CONTEXT, } from './trace/invalid-span-constants';\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { context } from './context-api';\nimport { diag } from './diag-api';\nimport { metrics } from './metrics-api';\nimport { propagation } from './propagation-api';\nimport { trace } from './trace-api';\n// Named export.\nexport { context, diag, metrics, propagation, trace };\n// Default export.\nexport default {\n    context: context,\n    diag: diag,\n    metrics: metrics,\n    propagation: propagation,\n    trace: trace,\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\n\nvar defaultParseOptions = {\n  decodeValues: true,\n  map: false,\n  silent: false,\n};\n\nfunction isNonEmptyString(str) {\n  return typeof str === \"string\" && !!str.trim();\n}\n\nfunction parseString(setCookieValue, options) {\n  var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n\n  var nameValuePairStr = parts.shift();\n  var parsed = parseNameValuePair(nameValuePairStr);\n  var name = parsed.name;\n  var value = parsed.value;\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  try {\n    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\n  } catch (e) {\n    console.error(\n      \"set-cookie-parser encountered an error while decoding a cookie with value '\" +\n        value +\n        \"'. Set options.decodeValues to false to disable this feature.\",\n      e\n    );\n  }\n\n  var cookie = {\n    name: name,\n    value: value,\n  };\n\n  parts.forEach(function (part) {\n    var sides = part.split(\"=\");\n    var key = sides.shift().trimLeft().toLowerCase();\n    var value = sides.join(\"=\");\n    if (key === \"expires\") {\n      cookie.expires = new Date(value);\n    } else if (key === \"max-age\") {\n      cookie.maxAge = parseInt(value, 10);\n    } else if (key === \"secure\") {\n      cookie.secure = true;\n    } else if (key === \"httponly\") {\n      cookie.httpOnly = true;\n    } else if (key === \"samesite\") {\n      cookie.sameSite = value;\n    } else if (key === \"partitioned\") {\n      cookie.partitioned = true;\n    } else {\n      cookie[key] = value;\n    }\n  });\n\n  return cookie;\n}\n\nfunction parseNameValuePair(nameValuePairStr) {\n  // Parses name-value-pair according to rfc6265bis draft\n\n  var name = \"\";\n  var value = \"\";\n  var nameValueArr = nameValuePairStr.split(\"=\");\n  if (nameValueArr.length > 1) {\n    name = nameValueArr.shift();\n    value = nameValueArr.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\n  } else {\n    value = nameValuePairStr;\n  }\n\n  return { name: name, value: value };\n}\n\nfunction parse(input, options) {\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!input) {\n    if (!options.map) {\n      return [];\n    } else {\n      return {};\n    }\n  }\n\n  if (input.headers) {\n    if (typeof input.headers.getSetCookie === \"function\") {\n      // for fetch responses - they combine headers of the same type in the headers array,\n      // but getSetCookie returns an uncombined array\n      input = input.headers.getSetCookie();\n    } else if (input.headers[\"set-cookie\"]) {\n      // fast-path for node.js (which automatically normalizes header names to lower-case\n      input = input.headers[\"set-cookie\"];\n    } else {\n      // slow-path for other environments - see #25\n      var sch =\n        input.headers[\n          Object.keys(input.headers).find(function (key) {\n            return key.toLowerCase() === \"set-cookie\";\n          })\n        ];\n      // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\n      if (!sch && input.headers.cookie && !options.silent) {\n        console.warn(\n          \"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\"\n        );\n      }\n      input = sch;\n    }\n  }\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  if (!options.map) {\n    return input.filter(isNonEmptyString).map(function (str) {\n      return parseString(str, options);\n    });\n  } else {\n    var cookies = {};\n    return input.filter(isNonEmptyString).reduce(function (cookies, str) {\n      var cookie = parseString(str, options);\n      cookies[cookie.name] = cookie;\n      return cookies;\n    }, cookies);\n  }\n}\n\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/\nfunction splitCookiesString(cookiesString) {\n  if (Array.isArray(cookiesString)) {\n    return cookiesString;\n  }\n  if (typeof cookiesString !== \"string\") {\n    return [];\n  }\n\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  }\n\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\n        lastComma = pos;\n        pos += 1;\n\n        skipWhitespace();\n        nextStart = pos;\n\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n\n        // currently special character\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          // we found cookies separator\n          cookiesSeparatorFound = true;\n          // pos is inside the next cookie, so back up and return it.\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          // in param ',' or param separator ';',\n          // we continue from that comma\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n\n  return cookiesStrings;\n}\n\nmodule.exports = parse;\nmodule.exports.parse = parse;\nmodule.exports.parseString = parseString;\nmodule.exports.splitCookiesString = splitCookiesString;\n"],"names":["DiagLogLevel","ValueType","TraceFlags","SamplingDecision","SpanKind","SpanStatusCode","_globalThis","globalThis","self","window","__webpack_require__","g","VERSION","re","isCompatible","_makeCompatibilityCheck","ownVersion","acceptedVersions","Set","rejectedVersions","myVersionMatch","match","ownVersionParsed","major","minor","patch","prerelease","globalVersion","_reject","v","add","has","globalVersionMatch","globalVersionParsed","GLOBAL_OPENTELEMETRY_API_KEY","Symbol","for","split","registerGlobal","type","instance","diag","allowOverride","_a","api","_global","version","err","error","stack","message","debug","getGlobal","_b","unregisterGlobal","__read","o","n","m","iterator","r","e","i","call","ar","next","done","push","value","__spreadArray","to","from","pack","arguments","length","l","Array","prototype","slice","concat","DiagComponentLogger","props","_namespace","namespace","args","_i","logProxy","info","warn","verbose","funcName","logger","unshift","apply","diag_read","diag_spreadArray","DiagAPI","_logProxy","setLogger","optionsOrLogLevel","logLevel","INFO","_c","oldLogger","newLogger","createLogLevelDiagLogger","maxLevel","_filterFunc","theLevel","theFunc","bind","NONE","ALL","ERROR","WARN","DEBUG","VERBOSE","suppressOverrideMessage","disable","createComponentLogger","options","_instance","baggage_impl_read","__values","s","BaggageImpl","entries","_entries","Map","getEntry","key","entry","get","Object","assign","getAllEntries","map","setEntry","newBaggage","set","removeEntry","delete","removeEntries","e_1","keys","keys_1","keys_1_1","e_1_1","return","clear","baggageEntryMetadataSymbol","createBaggage","baggageEntryMetadataFromString","str","__TYPE__","toString","createContextKey","description","ROOT_CONTEXT","BaseContext","parentContext","_currentContext","getValue","setValue","context","deleteValue","consoleMap","c","DiagConsoleLogger","_consoleFunc","console","log","__extends","extendStatics","d","b","setPrototypeOf","__proto__","p","hasOwnProperty","String","__","constructor","create","NoopMeter","createGauge","_name","_options","NOOP_GAUGE_METRIC","createHistogram","NOOP_HISTOGRAM_METRIC","createCounter","NOOP_COUNTER_METRIC","createUpDownCounter","NOOP_UP_DOWN_COUNTER_METRIC","createObservableGauge","NOOP_OBSERVABLE_GAUGE_METRIC","createObservableCounter","NOOP_OBSERVABLE_COUNTER_METRIC","createObservableUpDownCounter","NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC","addBatchObservableCallback","_callback","_observables","removeBatchObservableCallback","NoopMetric","NoopCounterMetric","_super","_value","_attributes","NoopUpDownCounterMetric","NoopGaugeMetric","record","NoopHistogramMetric","NoopObservableMetric","addCallback","removeCallback","NoopObservableCounterMetric","NoopObservableGaugeMetric","NoopObservableUpDownCounterMetric","NOOP_METER","createNoopMeter","defaultTextMapGetter","carrier","defaultTextMapSetter","NoopContextManager_read","NoopContextManager_spreadArray","NoopContextManager","active","with","_context","fn","thisArg","target","enable","context_read","context_spreadArray","context_API_NAME","NOOP_CONTEXT_MANAGER","ContextAPI","getInstance","setGlobalContextManager","contextManager","_getContextManager","INVALID_SPANID","INVALID_TRACEID","INVALID_SPAN_CONTEXT","traceId","spanId","traceFlags","NonRecordingSpan","_spanContext","spanContext","setAttribute","_key","setAttributes","addEvent","addLink","_link","addLinks","_links","setStatus","_status","updateName","end","_endTime","isRecording","recordException","_exception","_time","SPAN_KEY","getSpan","undefined","getActiveSpan","setSpan","span","deleteSpan","setSpanContext","getSpanContext","VALID_TRACEID_REGEX","VALID_SPANID_REGEX","isValidTraceId","test","isValidSpanId","isSpanContextValid","wrapSpanContext","contextApi","NoopTracer","startSpan","name","root","parentFromContext","startActiveSpan","arg2","arg3","arg4","opts","ctx","contextWithSpanSet","NOOP_TRACER","ProxyTracer","_provider","_getTracer","_fn","tracer","Reflect","_delegate","getDelegateTracer","NOOP_TRACER_PROVIDER","NoopTracerProvider","getTracer","_version","ProxyTracerProvider","getDelegate","setDelegate","delegate","VALID_KEY_CHAR_RANGE","VALID_KEY_REGEX","VALID_VALUE_BASE_REGEX","INVALID_VALUE_COMMA_EQUAL_REGEX","TraceStateImpl","rawTraceState","_internalState","_parse","traceState","_clone","unset","serialize","_this","_keys","reduce","agg","join","reverse","part","listMember","trim","indexOf","size","createTraceState","diag_api_diag","NOOP_METER_PROVIDER","NoopMeterProvider","getMeter","metrics_API_NAME","metrics","MetricsAPI","setGlobalMeterProvider","provider","getMeterProvider","NoopTextMapPropagator","inject","_carrier","extract","fields","BAGGAGE_KEY","getBaggage","getActiveBaggage","setBaggage","baggage","deleteBaggage","propagation_API_NAME","NOOP_TEXT_MAP_PROPAGATOR","propagation","PropagationAPI","setGlobalPropagator","propagator","setter","_getGlobalPropagator","getter","trace_API_NAME","trace","TraceAPI","_proxyTracerProvider","setGlobalTracerProvider","success","getTracerProvider","esm","defaultParseOptions","decodeValues","silent","isNonEmptyString","parseString","setCookieValue","nameValuePairStr","nameValueArr","parts","filter","parsed","shift","decodeURIComponent","cookie","forEach","sides","trimLeft","toLowerCase","expires","Date","maxAge","parseInt","secure","httpOnly","sameSite","partitioned","parse","input","headers","getSetCookie","sch","find","isArray","cookies","module","exports","splitCookiesString","cookiesString","start","ch","lastComma","nextStart","cookiesSeparatorFound","cookiesStrings","pos","skipWhitespace","charAt","substring"],"sourceRoot":""}