{"version":3,"file":"517.js","mappings":"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","sources":["webpack://_N_E/./node_modules/.pnpm/@supabase+realtime-js@2.11.2/node_modules/@supabase/realtime-js/dist/module/lib/version.js","webpack://_N_E/./node_modules/.pnpm/@supabase+realtime-js@2.11.2/node_modules/@supabase/realtime-js/dist/module/lib/constants.js","webpack://_N_E/./node_modules/.pnpm/@supabase+realtime-js@2.11.2/node_modules/@supabase/realtime-js/dist/module/lib/serializer.js","webpack://_N_E/./node_modules/.pnpm/@supabase+realtime-js@2.11.2/node_modules/@supabase/realtime-js/dist/module/lib/timer.js","webpack://_N_E/./node_modules/.pnpm/@supabase+realtime-js@2.11.2/node_modules/@supabase/realtime-js/dist/module/lib/transformers.js","webpack://_N_E/./node_modules/.pnpm/@supabase+realtime-js@2.11.2/node_modules/@supabase/realtime-js/dist/module/lib/push.js","webpack://_N_E/./node_modules/.pnpm/@supabase+realtime-js@2.11.2/node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js","webpack://_N_E/./node_modules/.pnpm/@supabase+realtime-js@2.11.2/node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js","webpack://_N_E/./node_modules/.pnpm/@supabase+realtime-js@2.11.2/node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js","webpack://_N_E/./node_modules/.pnpm/@supabase+realtime-js@2.11.2/node_modules/@supabase/realtime-js/dist/module/index.js","webpack://_N_E/./node_modules/.pnpm/@supabase+storage-js@2.7.1/node_modules/@supabase/storage-js/dist/module/lib/errors.js","webpack://_N_E/./node_modules/.pnpm/@supabase+storage-js@2.7.1/node_modules/@supabase/storage-js/dist/module/lib/helpers.js","webpack://_N_E/./node_modules/.pnpm/@supabase+storage-js@2.7.1/node_modules/@supabase/storage-js/dist/module/lib/fetch.js","webpack://_N_E/./node_modules/.pnpm/@supabase+storage-js@2.7.1/node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js","webpack://_N_E/./node_modules/.pnpm/@supabase+storage-js@2.7.1/node_modules/@supabase/storage-js/dist/module/lib/version.js","webpack://_N_E/./node_modules/.pnpm/@supabase+storage-js@2.7.1/node_modules/@supabase/storage-js/dist/module/lib/constants.js","webpack://_N_E/./node_modules/.pnpm/@supabase+storage-js@2.7.1/node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js","webpack://_N_E/./node_modules/.pnpm/@supabase+storage-js@2.7.1/node_modules/@supabase/storage-js/dist/module/StorageClient.js","webpack://_N_E/./node_modules/.pnpm/@supabase+supabase-js@2.48.1/node_modules/@supabase/supabase-js/dist/module/lib/version.js","webpack://_N_E/./node_modules/.pnpm/@supabase+supabase-js@2.48.1/node_modules/@supabase/supabase-js/dist/module/lib/constants.js","webpack://_N_E/./node_modules/.pnpm/@supabase+supabase-js@2.48.1/node_modules/@supabase/supabase-js/dist/module/lib/fetch.js","webpack://_N_E/./node_modules/.pnpm/@supabase+supabase-js@2.48.1/node_modules/@supabase/supabase-js/dist/module/lib/helpers.js","webpack://_N_E/./node_modules/.pnpm/@supabase+supabase-js@2.48.1/node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js","webpack://_N_E/./node_modules/.pnpm/@supabase+supabase-js@2.48.1/node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js","webpack://_N_E/./node_modules/.pnpm/@supabase+supabase-js@2.48.1/node_modules/@supabase/supabase-js/dist/module/index.js","webpack://_N_E/./node_modules/.pnpm/ws@8.18.0/node_modules/ws/browser.js"],"sourcesContent":["export const version = '2.11.2';\n//# sourceMappingURL=version.js.map","import { version } from './version';\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `realtime-js/${version}` };\nexport const VSN = '1.0.0';\nexport const DEFAULT_TIMEOUT = 10000;\nexport const WS_CLOSE_NORMAL = 1000;\nexport var SOCKET_STATES;\n(function (SOCKET_STATES) {\n    SOCKET_STATES[SOCKET_STATES[\"connecting\"] = 0] = \"connecting\";\n    SOCKET_STATES[SOCKET_STATES[\"open\"] = 1] = \"open\";\n    SOCKET_STATES[SOCKET_STATES[\"closing\"] = 2] = \"closing\";\n    SOCKET_STATES[SOCKET_STATES[\"closed\"] = 3] = \"closed\";\n})(SOCKET_STATES || (SOCKET_STATES = {}));\nexport var CHANNEL_STATES;\n(function (CHANNEL_STATES) {\n    CHANNEL_STATES[\"closed\"] = \"closed\";\n    CHANNEL_STATES[\"errored\"] = \"errored\";\n    CHANNEL_STATES[\"joined\"] = \"joined\";\n    CHANNEL_STATES[\"joining\"] = \"joining\";\n    CHANNEL_STATES[\"leaving\"] = \"leaving\";\n})(CHANNEL_STATES || (CHANNEL_STATES = {}));\nexport var CHANNEL_EVENTS;\n(function (CHANNEL_EVENTS) {\n    CHANNEL_EVENTS[\"close\"] = \"phx_close\";\n    CHANNEL_EVENTS[\"error\"] = \"phx_error\";\n    CHANNEL_EVENTS[\"join\"] = \"phx_join\";\n    CHANNEL_EVENTS[\"reply\"] = \"phx_reply\";\n    CHANNEL_EVENTS[\"leave\"] = \"phx_leave\";\n    CHANNEL_EVENTS[\"access_token\"] = \"access_token\";\n})(CHANNEL_EVENTS || (CHANNEL_EVENTS = {}));\nexport var TRANSPORTS;\n(function (TRANSPORTS) {\n    TRANSPORTS[\"websocket\"] = \"websocket\";\n})(TRANSPORTS || (TRANSPORTS = {}));\nexport var CONNECTION_STATE;\n(function (CONNECTION_STATE) {\n    CONNECTION_STATE[\"Connecting\"] = \"connecting\";\n    CONNECTION_STATE[\"Open\"] = \"open\";\n    CONNECTION_STATE[\"Closing\"] = \"closing\";\n    CONNECTION_STATE[\"Closed\"] = \"closed\";\n})(CONNECTION_STATE || (CONNECTION_STATE = {}));\n//# sourceMappingURL=constants.js.map","// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\nexport default class Serializer {\n    constructor() {\n        this.HEADER_LENGTH = 1;\n    }\n    decode(rawPayload, callback) {\n        if (rawPayload.constructor === ArrayBuffer) {\n            return callback(this._binaryDecode(rawPayload));\n        }\n        if (typeof rawPayload === 'string') {\n            return callback(JSON.parse(rawPayload));\n        }\n        return callback({});\n    }\n    _binaryDecode(buffer) {\n        const view = new DataView(buffer);\n        const decoder = new TextDecoder();\n        return this._decodeBroadcast(buffer, view, decoder);\n    }\n    _decodeBroadcast(buffer, view, decoder) {\n        const topicSize = view.getUint8(1);\n        const eventSize = view.getUint8(2);\n        let offset = this.HEADER_LENGTH + 2;\n        const topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n        offset = offset + topicSize;\n        const event = decoder.decode(buffer.slice(offset, offset + eventSize));\n        offset = offset + eventSize;\n        const data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));\n        return { ref: null, topic: topic, event: event, payload: data };\n    }\n}\n//# sourceMappingURL=serializer.js.map","/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n    constructor(callback, timerCalc) {\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n        this.timer = undefined;\n        this.tries = 0;\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n    }\n    reset() {\n        this.tries = 0;\n        clearTimeout(this.timer);\n    }\n    // Cancels any previous scheduleTimeout and schedules callback\n    scheduleTimeout() {\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() => {\n            this.tries = this.tries + 1;\n            this.callback();\n        }, this.timerCalc(this.tries + 1));\n    }\n}\n//# sourceMappingURL=timer.js.map","/**\n * Helpers to convert the change Payload into native JS types.\n */\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\nexport var PostgresTypes;\n(function (PostgresTypes) {\n    PostgresTypes[\"abstime\"] = \"abstime\";\n    PostgresTypes[\"bool\"] = \"bool\";\n    PostgresTypes[\"date\"] = \"date\";\n    PostgresTypes[\"daterange\"] = \"daterange\";\n    PostgresTypes[\"float4\"] = \"float4\";\n    PostgresTypes[\"float8\"] = \"float8\";\n    PostgresTypes[\"int2\"] = \"int2\";\n    PostgresTypes[\"int4\"] = \"int4\";\n    PostgresTypes[\"int4range\"] = \"int4range\";\n    PostgresTypes[\"int8\"] = \"int8\";\n    PostgresTypes[\"int8range\"] = \"int8range\";\n    PostgresTypes[\"json\"] = \"json\";\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\n    PostgresTypes[\"money\"] = \"money\";\n    PostgresTypes[\"numeric\"] = \"numeric\";\n    PostgresTypes[\"oid\"] = \"oid\";\n    PostgresTypes[\"reltime\"] = \"reltime\";\n    PostgresTypes[\"text\"] = \"text\";\n    PostgresTypes[\"time\"] = \"time\";\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n    PostgresTypes[\"timetz\"] = \"timetz\";\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n})(PostgresTypes || (PostgresTypes = {}));\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\nexport const convertChangeData = (columns, record, options = {}) => {\n    var _a;\n    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n    return Object.keys(record).reduce((acc, rec_key) => {\n        acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\n        return acc;\n    }, {});\n};\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\nexport const convertColumn = (columnName, columns, record, skipTypes) => {\n    const column = columns.find((x) => x.name === columnName);\n    const colType = column === null || column === void 0 ? void 0 : column.type;\n    const value = record[columnName];\n    if (colType && !skipTypes.includes(colType)) {\n        return convertCell(colType, value);\n    }\n    return noop(value);\n};\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} value The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\nexport const convertCell = (type, value) => {\n    // if data type is an array\n    if (type.charAt(0) === '_') {\n        const dataType = type.slice(1, type.length);\n        return toArray(value, dataType);\n    }\n    // If not null, convert to correct type.\n    switch (type) {\n        case PostgresTypes.bool:\n            return toBoolean(value);\n        case PostgresTypes.float4:\n        case PostgresTypes.float8:\n        case PostgresTypes.int2:\n        case PostgresTypes.int4:\n        case PostgresTypes.int8:\n        case PostgresTypes.numeric:\n        case PostgresTypes.oid:\n            return toNumber(value);\n        case PostgresTypes.json:\n        case PostgresTypes.jsonb:\n            return toJson(value);\n        case PostgresTypes.timestamp:\n            return toTimestampString(value); // Format to be consistent with PostgREST\n        case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n        case PostgresTypes.date: // To allow users to cast it based on Timezone\n        case PostgresTypes.daterange:\n        case PostgresTypes.int4range:\n        case PostgresTypes.int8range:\n        case PostgresTypes.money:\n        case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n        case PostgresTypes.text:\n        case PostgresTypes.time: // To allow users to cast it based on Timezone\n        case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n        case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n        case PostgresTypes.tsrange:\n        case PostgresTypes.tstzrange:\n            return noop(value);\n        default:\n            // Return the value for remaining types\n            return noop(value);\n    }\n};\nconst noop = (value) => {\n    return value;\n};\nexport const toBoolean = (value) => {\n    switch (value) {\n        case 't':\n            return true;\n        case 'f':\n            return false;\n        default:\n            return value;\n    }\n};\nexport const toNumber = (value) => {\n    if (typeof value === 'string') {\n        const parsedValue = parseFloat(value);\n        if (!Number.isNaN(parsedValue)) {\n            return parsedValue;\n        }\n    }\n    return value;\n};\nexport const toJson = (value) => {\n    if (typeof value === 'string') {\n        try {\n            return JSON.parse(value);\n        }\n        catch (error) {\n            console.log(`JSON parse error: ${error}`);\n            return value;\n        }\n    }\n    return value;\n};\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\nexport const toArray = (value, type) => {\n    if (typeof value !== 'string') {\n        return value;\n    }\n    const lastIdx = value.length - 1;\n    const closeBrace = value[lastIdx];\n    const openBrace = value[0];\n    // Confirm value is a Postgres array by checking curly brackets\n    if (openBrace === '{' && closeBrace === '}') {\n        let arr;\n        const valTrim = value.slice(1, lastIdx);\n        // TODO: find a better solution to separate Postgres array data\n        try {\n            arr = JSON.parse('[' + valTrim + ']');\n        }\n        catch (_) {\n            // WARNING: splitting on comma does not cover all edge cases\n            arr = valTrim ? valTrim.split(',') : [];\n        }\n        return arr.map((val) => convertCell(type, val));\n    }\n    return value;\n};\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\nexport const toTimestampString = (value) => {\n    if (typeof value === 'string') {\n        return value.replace(' ', 'T');\n    }\n    return value;\n};\nexport const httpEndpointURL = (socketUrl) => {\n    let url = socketUrl;\n    url = url.replace(/^ws/i, 'http');\n    url = url.replace(/(\\/socket\\/websocket|\\/socket|\\/websocket)\\/?$/i, '');\n    return url.replace(/\\/+$/, '');\n};\n//# sourceMappingURL=transformers.js.map","import { DEFAULT_TIMEOUT } from '../lib/constants';\nexport default class Push {\n    /**\n     * Initializes the Push\n     *\n     * @param channel The Channel\n     * @param event The event, for example `\"phx_join\"`\n     * @param payload The payload, for example `{user_id: 123}`\n     * @param timeout The push timeout in milliseconds\n     */\n    constructor(channel, event, payload = {}, timeout = DEFAULT_TIMEOUT) {\n        this.channel = channel;\n        this.event = event;\n        this.payload = payload;\n        this.timeout = timeout;\n        this.sent = false;\n        this.timeoutTimer = undefined;\n        this.ref = '';\n        this.receivedResp = null;\n        this.recHooks = [];\n        this.refEvent = null;\n    }\n    resend(timeout) {\n        this.timeout = timeout;\n        this._cancelRefEvent();\n        this.ref = '';\n        this.refEvent = null;\n        this.receivedResp = null;\n        this.sent = false;\n        this.send();\n    }\n    send() {\n        if (this._hasReceived('timeout')) {\n            return;\n        }\n        this.startTimeout();\n        this.sent = true;\n        this.channel.socket.push({\n            topic: this.channel.topic,\n            event: this.event,\n            payload: this.payload,\n            ref: this.ref,\n            join_ref: this.channel._joinRef(),\n        });\n    }\n    updatePayload(payload) {\n        this.payload = Object.assign(Object.assign({}, this.payload), payload);\n    }\n    receive(status, callback) {\n        var _a;\n        if (this._hasReceived(status)) {\n            callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);\n        }\n        this.recHooks.push({ status, callback });\n        return this;\n    }\n    startTimeout() {\n        if (this.timeoutTimer) {\n            return;\n        }\n        this.ref = this.channel.socket._makeRef();\n        this.refEvent = this.channel._replyEventName(this.ref);\n        const callback = (payload) => {\n            this._cancelRefEvent();\n            this._cancelTimeout();\n            this.receivedResp = payload;\n            this._matchReceive(payload);\n        };\n        this.channel._on(this.refEvent, {}, callback);\n        this.timeoutTimer = setTimeout(() => {\n            this.trigger('timeout', {});\n        }, this.timeout);\n    }\n    trigger(status, response) {\n        if (this.refEvent)\n            this.channel._trigger(this.refEvent, { status, response });\n    }\n    destroy() {\n        this._cancelRefEvent();\n        this._cancelTimeout();\n    }\n    _cancelRefEvent() {\n        if (!this.refEvent) {\n            return;\n        }\n        this.channel._off(this.refEvent, {});\n    }\n    _cancelTimeout() {\n        clearTimeout(this.timeoutTimer);\n        this.timeoutTimer = undefined;\n    }\n    _matchReceive({ status, response, }) {\n        this.recHooks\n            .filter((h) => h.status === status)\n            .forEach((h) => h.callback(response));\n    }\n    _hasReceived(status) {\n        return this.receivedResp && this.receivedResp.status === status;\n    }\n}\n//# sourceMappingURL=push.js.map","/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\nexport default class RealtimePresence {\n    /**\n     * Initializes the Presence.\n     *\n     * @param channel - The RealtimeChannel\n     * @param opts - The options,\n     *        for example `{events: {state: 'state', diff: 'diff'}}`\n     */\n    constructor(channel, opts) {\n        this.channel = channel;\n        this.state = {};\n        this.pendingDiffs = [];\n        this.joinRef = null;\n        this.caller = {\n            onJoin: () => { },\n            onLeave: () => { },\n            onSync: () => { },\n        };\n        const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n            state: 'presence_state',\n            diff: 'presence_diff',\n        };\n        this.channel._on(events.state, {}, (newState) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            this.joinRef = this.channel._joinRef();\n            this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\n            this.pendingDiffs.forEach((diff) => {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n            });\n            this.pendingDiffs = [];\n            onSync();\n        });\n        this.channel._on(events.diff, {}, (diff) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            if (this.inPendingSyncState()) {\n                this.pendingDiffs.push(diff);\n            }\n            else {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n                onSync();\n            }\n        });\n        this.onJoin((key, currentPresences, newPresences) => {\n            this.channel._trigger('presence', {\n                event: 'join',\n                key,\n                currentPresences,\n                newPresences,\n            });\n        });\n        this.onLeave((key, currentPresences, leftPresences) => {\n            this.channel._trigger('presence', {\n                event: 'leave',\n                key,\n                currentPresences,\n                leftPresences,\n            });\n        });\n        this.onSync(() => {\n            this.channel._trigger('presence', { event: 'sync' });\n        });\n    }\n    /**\n     * Used to sync the list of presences on the server with the\n     * client's state.\n     *\n     * An optional `onJoin` and `onLeave` callback can be provided to\n     * react to changes in the client's local presences across\n     * disconnects and reconnects with the server.\n     *\n     * @internal\n     */\n    static syncState(currentState, newState, onJoin, onLeave) {\n        const state = this.cloneDeep(currentState);\n        const transformedState = this.transformState(newState);\n        const joins = {};\n        const leaves = {};\n        this.map(state, (key, presences) => {\n            if (!transformedState[key]) {\n                leaves[key] = presences;\n            }\n        });\n        this.map(transformedState, (key, newPresences) => {\n            const currentPresences = state[key];\n            if (currentPresences) {\n                const newPresenceRefs = newPresences.map((m) => m.presence_ref);\n                const curPresenceRefs = currentPresences.map((m) => m.presence_ref);\n                const joinedPresences = newPresences.filter((m) => curPresenceRefs.indexOf(m.presence_ref) < 0);\n                const leftPresences = currentPresences.filter((m) => newPresenceRefs.indexOf(m.presence_ref) < 0);\n                if (joinedPresences.length > 0) {\n                    joins[key] = joinedPresences;\n                }\n                if (leftPresences.length > 0) {\n                    leaves[key] = leftPresences;\n                }\n            }\n            else {\n                joins[key] = newPresences;\n            }\n        });\n        return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);\n    }\n    /**\n     * Used to sync a diff of presence join and leave events from the\n     * server, as they happen.\n     *\n     * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n     * `onLeave` callbacks to react to a user joining or leaving from a\n     * device.\n     *\n     * @internal\n     */\n    static syncDiff(state, diff, onJoin, onLeave) {\n        const { joins, leaves } = {\n            joins: this.transformState(diff.joins),\n            leaves: this.transformState(diff.leaves),\n        };\n        if (!onJoin) {\n            onJoin = () => { };\n        }\n        if (!onLeave) {\n            onLeave = () => { };\n        }\n        this.map(joins, (key, newPresences) => {\n            var _a;\n            const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n            state[key] = this.cloneDeep(newPresences);\n            if (currentPresences.length > 0) {\n                const joinedPresenceRefs = state[key].map((m) => m.presence_ref);\n                const curPresences = currentPresences.filter((m) => joinedPresenceRefs.indexOf(m.presence_ref) < 0);\n                state[key].unshift(...curPresences);\n            }\n            onJoin(key, currentPresences, newPresences);\n        });\n        this.map(leaves, (key, leftPresences) => {\n            let currentPresences = state[key];\n            if (!currentPresences)\n                return;\n            const presenceRefsToRemove = leftPresences.map((m) => m.presence_ref);\n            currentPresences = currentPresences.filter((m) => presenceRefsToRemove.indexOf(m.presence_ref) < 0);\n            state[key] = currentPresences;\n            onLeave(key, currentPresences, leftPresences);\n            if (currentPresences.length === 0)\n                delete state[key];\n        });\n        return state;\n    }\n    /** @internal */\n    static map(obj, func) {\n        return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));\n    }\n    /**\n     * Remove 'metas' key\n     * Change 'phx_ref' to 'presence_ref'\n     * Remove 'phx_ref' and 'phx_ref_prev'\n     *\n     * @example\n     * // returns {\n     *  abc123: [\n     *    { presence_ref: '2', user_id: 1 },\n     *    { presence_ref: '3', user_id: 2 }\n     *  ]\n     * }\n     * RealtimePresence.transformState({\n     *  abc123: {\n     *    metas: [\n     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n     *      { phx_ref: '3', user_id: 2 }\n     *    ]\n     *  }\n     * })\n     *\n     * @internal\n     */\n    static transformState(state) {\n        state = this.cloneDeep(state);\n        return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n            const presences = state[key];\n            if ('metas' in presences) {\n                newState[key] = presences.metas.map((presence) => {\n                    presence['presence_ref'] = presence['phx_ref'];\n                    delete presence['phx_ref'];\n                    delete presence['phx_ref_prev'];\n                    return presence;\n                });\n            }\n            else {\n                newState[key] = presences;\n            }\n            return newState;\n        }, {});\n    }\n    /** @internal */\n    static cloneDeep(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    /** @internal */\n    onJoin(callback) {\n        this.caller.onJoin = callback;\n    }\n    /** @internal */\n    onLeave(callback) {\n        this.caller.onLeave = callback;\n    }\n    /** @internal */\n    onSync(callback) {\n        this.caller.onSync = callback;\n    }\n    /** @internal */\n    inPendingSyncState() {\n        return !this.joinRef || this.joinRef !== this.channel._joinRef();\n    }\n}\n//# sourceMappingURL=RealtimePresence.js.map","import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nimport * as Transformers from './lib/transformers';\nimport { httpEndpointURL } from './lib/transformers';\nexport var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\n(function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\n})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));\nexport var REALTIME_LISTEN_TYPES;\n(function (REALTIME_LISTEN_TYPES) {\n    REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\n    REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\n    REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\n    REALTIME_LISTEN_TYPES[\"SYSTEM\"] = \"system\";\n})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));\nexport var REALTIME_SUBSCRIBE_STATES;\n(function (REALTIME_SUBSCRIBE_STATES) {\n    REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n    REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n    REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n    REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));\nexport const REALTIME_CHANNEL_STATES = CHANNEL_STATES;\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n */\nexport default class RealtimeChannel {\n    constructor(\n    /** Topic name can be any string. */\n    topic, params = { config: {} }, socket) {\n        this.topic = topic;\n        this.params = params;\n        this.socket = socket;\n        this.bindings = {};\n        this.state = CHANNEL_STATES.closed;\n        this.joinedOnce = false;\n        this.pushBuffer = [];\n        this.subTopic = topic.replace(/^realtime:/i, '');\n        this.params.config = Object.assign({\n            broadcast: { ack: false, self: false },\n            presence: { key: '' },\n            private: false,\n        }, params.config);\n        this.timeout = this.socket.timeout;\n        this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n        this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);\n        this.joinPush.receive('ok', () => {\n            this.state = CHANNEL_STATES.joined;\n            this.rejoinTimer.reset();\n            this.pushBuffer.forEach((pushEvent) => pushEvent.send());\n            this.pushBuffer = [];\n        });\n        this._onClose(() => {\n            this.rejoinTimer.reset();\n            this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`);\n            this.state = CHANNEL_STATES.closed;\n            this.socket._remove(this);\n        });\n        this._onError((reason) => {\n            if (this._isLeaving() || this._isClosed()) {\n                return;\n            }\n            this.socket.log('channel', `error ${this.topic}`, reason);\n            this.state = CHANNEL_STATES.errored;\n            this.rejoinTimer.scheduleTimeout();\n        });\n        this.joinPush.receive('timeout', () => {\n            if (!this._isJoining()) {\n                return;\n            }\n            this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n            this.state = CHANNEL_STATES.errored;\n            this.rejoinTimer.scheduleTimeout();\n        });\n        this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {\n            this._trigger(this._replyEventName(ref), payload);\n        });\n        this.presence = new RealtimePresence(this);\n        this.broadcastEndpointURL =\n            httpEndpointURL(this.socket.endPoint) + '/api/broadcast';\n        this.private = this.params.config.private || false;\n    }\n    /** Subscribe registers your client with the server */\n    subscribe(callback, timeout = this.timeout) {\n        var _a, _b;\n        if (!this.socket.isConnected()) {\n            this.socket.connect();\n        }\n        if (this.joinedOnce) {\n            throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;\n        }\n        else {\n            const { config: { broadcast, presence, private: isPrivate }, } = this.params;\n            this._onError((e) => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, e));\n            this._onClose(() => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CLOSED));\n            const accessTokenPayload = {};\n            const config = {\n                broadcast,\n                presence,\n                postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map((r) => r.filter)) !== null && _b !== void 0 ? _b : [],\n                private: isPrivate,\n            };\n            if (this.socket.accessTokenValue) {\n                accessTokenPayload.access_token = this.socket.accessTokenValue;\n            }\n            this.updateJoinPayload(Object.assign({ config }, accessTokenPayload));\n            this.joinedOnce = true;\n            this._rejoin(timeout);\n            this.joinPush\n                .receive('ok', async ({ postgres_changes }) => {\n                var _a;\n                this.socket.setAuth();\n                if (postgres_changes === undefined) {\n                    callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);\n                    return;\n                }\n                else {\n                    const clientPostgresBindings = this.bindings.postgres_changes;\n                    const bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n                    const newPostgresBindings = [];\n                    for (let i = 0; i < bindingsLen; i++) {\n                        const clientPostgresBinding = clientPostgresBindings[i];\n                        const { filter: { event, schema, table, filter }, } = clientPostgresBinding;\n                        const serverPostgresFilter = postgres_changes && postgres_changes[i];\n                        if (serverPostgresFilter &&\n                            serverPostgresFilter.event === event &&\n                            serverPostgresFilter.schema === schema &&\n                            serverPostgresFilter.table === table &&\n                            serverPostgresFilter.filter === filter) {\n                            newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), { id: serverPostgresFilter.id }));\n                        }\n                        else {\n                            this.unsubscribe();\n                            callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error('mismatch between server and client bindings for postgres changes'));\n                            return;\n                        }\n                    }\n                    this.bindings.postgres_changes = newPostgresBindings;\n                    callback && callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);\n                    return;\n                }\n            })\n                .receive('error', (error) => {\n                callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n                return;\n            })\n                .receive('timeout', () => {\n                callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.TIMED_OUT);\n                return;\n            });\n        }\n        return this;\n    }\n    presenceState() {\n        return this.presence.state;\n    }\n    async track(payload, opts = {}) {\n        return await this.send({\n            type: 'presence',\n            event: 'track',\n            payload,\n        }, opts.timeout || this.timeout);\n    }\n    async untrack(opts = {}) {\n        return await this.send({\n            type: 'presence',\n            event: 'untrack',\n        }, opts);\n    }\n    on(type, filter, callback) {\n        return this._on(type, filter, callback);\n    }\n    /**\n     * Sends a message into the channel.\n     *\n     * @param args Arguments to send to channel\n     * @param args.type The type of event to send\n     * @param args.event The name of the event being sent\n     * @param args.payload Payload to be sent\n     * @param opts Options to be used during the send process\n     */\n    async send(args, opts = {}) {\n        var _a, _b;\n        if (!this._canPush() && args.type === 'broadcast') {\n            const { event, payload: endpoint_payload } = args;\n            const authorization = this.socket.accessTokenValue\n                ? `Bearer ${this.socket.accessTokenValue}`\n                : '';\n            const options = {\n                method: 'POST',\n                headers: {\n                    Authorization: authorization,\n                    apikey: this.socket.apiKey ? this.socket.apiKey : '',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    messages: [\n                        {\n                            topic: this.subTopic,\n                            event,\n                            payload: endpoint_payload,\n                            private: this.private,\n                        },\n                    ],\n                }),\n            };\n            try {\n                const response = await this._fetchWithTimeout(this.broadcastEndpointURL, options, (_a = opts.timeout) !== null && _a !== void 0 ? _a : this.timeout);\n                await ((_b = response.body) === null || _b === void 0 ? void 0 : _b.cancel());\n                return response.ok ? 'ok' : 'error';\n            }\n            catch (error) {\n                if (error.name === 'AbortError') {\n                    return 'timed out';\n                }\n                else {\n                    return 'error';\n                }\n            }\n        }\n        else {\n            return new Promise((resolve) => {\n                var _a, _b, _c;\n                const push = this._push(args.type, args, opts.timeout || this.timeout);\n                if (args.type === 'broadcast' && !((_c = (_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n                    resolve('ok');\n                }\n                push.receive('ok', () => resolve('ok'));\n                push.receive('error', () => resolve('error'));\n                push.receive('timeout', () => resolve('timed out'));\n            });\n        }\n    }\n    updateJoinPayload(payload) {\n        this.joinPush.updatePayload(payload);\n    }\n    /**\n     * Leaves the channel.\n     *\n     * Unsubscribes from server events, and instructs channel to terminate on server.\n     * Triggers onClose() hooks.\n     *\n     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n     * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n     */\n    unsubscribe(timeout = this.timeout) {\n        this.state = CHANNEL_STATES.leaving;\n        const onClose = () => {\n            this.socket.log('channel', `leave ${this.topic}`);\n            this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef());\n        };\n        this.rejoinTimer.reset();\n        // Destroy joinPush to avoid connection timeouts during unscription phase\n        this.joinPush.destroy();\n        return new Promise((resolve) => {\n            const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n            leavePush\n                .receive('ok', () => {\n                onClose();\n                resolve('ok');\n            })\n                .receive('timeout', () => {\n                onClose();\n                resolve('timed out');\n            })\n                .receive('error', () => {\n                resolve('error');\n            });\n            leavePush.send();\n            if (!this._canPush()) {\n                leavePush.trigger('ok', {});\n            }\n        });\n    }\n    /** @internal */\n    async _fetchWithTimeout(url, options, timeout) {\n        const controller = new AbortController();\n        const id = setTimeout(() => controller.abort(), timeout);\n        const response = await this.socket.fetch(url, Object.assign(Object.assign({}, options), { signal: controller.signal }));\n        clearTimeout(id);\n        return response;\n    }\n    /** @internal */\n    _push(event, payload, timeout = this.timeout) {\n        if (!this.joinedOnce) {\n            throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n        }\n        let pushEvent = new Push(this, event, payload, timeout);\n        if (this._canPush()) {\n            pushEvent.send();\n        }\n        else {\n            pushEvent.startTimeout();\n            this.pushBuffer.push(pushEvent);\n        }\n        return pushEvent;\n    }\n    /**\n     * Overridable message hook\n     *\n     * Receives all events for specialized message handling before dispatching to the channel callbacks.\n     * Must return the payload, modified or unmodified.\n     *\n     * @internal\n     */\n    _onMessage(_event, payload, _ref) {\n        return payload;\n    }\n    /** @internal */\n    _isMember(topic) {\n        return this.topic === topic;\n    }\n    /** @internal */\n    _joinRef() {\n        return this.joinPush.ref;\n    }\n    /** @internal */\n    _trigger(type, payload, ref) {\n        var _a, _b;\n        const typeLower = type.toLocaleLowerCase();\n        const { close, error, leave, join } = CHANNEL_EVENTS;\n        const events = [close, error, leave, join];\n        if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n            return;\n        }\n        let handledPayload = this._onMessage(typeLower, payload, ref);\n        if (payload && !handledPayload) {\n            throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n        }\n        if (['insert', 'update', 'delete'].includes(typeLower)) {\n            (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter((bind) => {\n                var _a, _b, _c;\n                return (((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' ||\n                    ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower);\n            }).map((bind) => bind.callback(handledPayload, ref));\n        }\n        else {\n            (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter((bind) => {\n                var _a, _b, _c, _d, _e, _f;\n                if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n                    if ('id' in bind) {\n                        const bindId = bind.id;\n                        const bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n                        return (bindId &&\n                            ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) &&\n                            (bindEvent === '*' ||\n                                (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) ===\n                                    ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase())));\n                    }\n                    else {\n                        const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n                        return (bindEvent === '*' ||\n                            bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase()));\n                    }\n                }\n                else {\n                    return bind.type.toLocaleLowerCase() === typeLower;\n                }\n            }).map((bind) => {\n                if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n                    const postgresChanges = handledPayload.data;\n                    const { schema, table, commit_timestamp, type, errors } = postgresChanges;\n                    const enrichedPayload = {\n                        schema: schema,\n                        table: table,\n                        commit_timestamp: commit_timestamp,\n                        eventType: type,\n                        new: {},\n                        old: {},\n                        errors: errors,\n                    };\n                    handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));\n                }\n                bind.callback(handledPayload, ref);\n            });\n        }\n    }\n    /** @internal */\n    _isClosed() {\n        return this.state === CHANNEL_STATES.closed;\n    }\n    /** @internal */\n    _isJoined() {\n        return this.state === CHANNEL_STATES.joined;\n    }\n    /** @internal */\n    _isJoining() {\n        return this.state === CHANNEL_STATES.joining;\n    }\n    /** @internal */\n    _isLeaving() {\n        return this.state === CHANNEL_STATES.leaving;\n    }\n    /** @internal */\n    _replyEventName(ref) {\n        return `chan_reply_${ref}`;\n    }\n    /** @internal */\n    _on(type, filter, callback) {\n        const typeLower = type.toLocaleLowerCase();\n        const binding = {\n            type: typeLower,\n            filter: filter,\n            callback: callback,\n        };\n        if (this.bindings[typeLower]) {\n            this.bindings[typeLower].push(binding);\n        }\n        else {\n            this.bindings[typeLower] = [binding];\n        }\n        return this;\n    }\n    /** @internal */\n    _off(type, filter) {\n        const typeLower = type.toLocaleLowerCase();\n        this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\n            var _a;\n            return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower &&\n                RealtimeChannel.isEqual(bind.filter, filter));\n        });\n        return this;\n    }\n    /** @internal */\n    static isEqual(obj1, obj2) {\n        if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n            return false;\n        }\n        for (const k in obj1) {\n            if (obj1[k] !== obj2[k]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /** @internal */\n    _rejoinUntilConnected() {\n        this.rejoinTimer.scheduleTimeout();\n        if (this.socket.isConnected()) {\n            this._rejoin();\n        }\n    }\n    /**\n     * Registers a callback that will be executed when the channel closes.\n     *\n     * @internal\n     */\n    _onClose(callback) {\n        this._on(CHANNEL_EVENTS.close, {}, callback);\n    }\n    /**\n     * Registers a callback that will be executed when the channel encounteres an error.\n     *\n     * @internal\n     */\n    _onError(callback) {\n        this._on(CHANNEL_EVENTS.error, {}, (reason) => callback(reason));\n    }\n    /**\n     * Returns `true` if the socket is connected and the channel has been joined.\n     *\n     * @internal\n     */\n    _canPush() {\n        return this.socket.isConnected() && this._isJoined();\n    }\n    /** @internal */\n    _rejoin(timeout = this.timeout) {\n        if (this._isLeaving()) {\n            return;\n        }\n        this.socket._leaveOpenTopic(this.topic);\n        this.state = CHANNEL_STATES.joining;\n        this.joinPush.resend(timeout);\n    }\n    /** @internal */\n    _getPayloadRecords(payload) {\n        const records = {\n            new: {},\n            old: {},\n        };\n        if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n            records.new = Transformers.convertChangeData(payload.columns, payload.record);\n        }\n        if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n            records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n        }\n        return records;\n    }\n}\n//# sourceMappingURL=RealtimeChannel.js.map","import { CHANNEL_EVENTS, CONNECTION_STATE, DEFAULT_HEADERS, DEFAULT_TIMEOUT, SOCKET_STATES, TRANSPORTS, VSN, WS_CLOSE_NORMAL, } from './lib/constants';\nimport Serializer from './lib/serializer';\nimport Timer from './lib/timer';\nimport { httpEndpointURL } from './lib/transformers';\nimport RealtimeChannel from './RealtimeChannel';\nconst noop = () => { };\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== 'undefined';\nconst WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`;\nexport default class RealtimeClient {\n    /**\n     * Initializes the Socket.\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket.\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers The optional headers to pass when connecting.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     * @param options.worker Use Web Worker to set a side flow. Defaults to false.\n     * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\n     */\n    constructor(endPoint, options) {\n        var _a;\n        this.accessTokenValue = null;\n        this.apiKey = null;\n        this.channels = [];\n        this.endPoint = '';\n        this.httpEndpoint = '';\n        this.headers = DEFAULT_HEADERS;\n        this.params = {};\n        this.timeout = DEFAULT_TIMEOUT;\n        this.heartbeatIntervalMs = 30000;\n        this.heartbeatTimer = undefined;\n        this.pendingHeartbeatRef = null;\n        this.ref = 0;\n        this.logger = noop;\n        this.conn = null;\n        this.sendBuffer = [];\n        this.serializer = new Serializer();\n        this.stateChangeCallbacks = {\n            open: [],\n            close: [],\n            error: [],\n            message: [],\n        };\n        this.accessToken = null;\n        /**\n         * Use either custom fetch, if provided, or default fetch to make HTTP requests\n         *\n         * @internal\n         */\n        this._resolveFetch = (customFetch) => {\n            let _fetch;\n            if (customFetch) {\n                _fetch = customFetch;\n            }\n            else if (typeof fetch === 'undefined') {\n                _fetch = (...args) => import('@supabase/node-fetch').then(({ default: fetch }) => fetch(...args));\n            }\n            else {\n                _fetch = fetch;\n            }\n            return (...args) => _fetch(...args);\n        };\n        this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n        this.httpEndpoint = httpEndpointURL(endPoint);\n        if (options === null || options === void 0 ? void 0 : options.transport) {\n            this.transport = options.transport;\n        }\n        else {\n            this.transport = null;\n        }\n        if (options === null || options === void 0 ? void 0 : options.params)\n            this.params = options.params;\n        if (options === null || options === void 0 ? void 0 : options.headers)\n            this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n        if (options === null || options === void 0 ? void 0 : options.timeout)\n            this.timeout = options.timeout;\n        if (options === null || options === void 0 ? void 0 : options.logger)\n            this.logger = options.logger;\n        if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs)\n            this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n        const accessTokenValue = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;\n        if (accessTokenValue) {\n            this.accessTokenValue = accessTokenValue;\n            this.apiKey = accessTokenValue;\n        }\n        this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs)\n            ? options.reconnectAfterMs\n            : (tries) => {\n                return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n            };\n        this.encode = (options === null || options === void 0 ? void 0 : options.encode)\n            ? options.encode\n            : (payload, callback) => {\n                return callback(JSON.stringify(payload));\n            };\n        this.decode = (options === null || options === void 0 ? void 0 : options.decode)\n            ? options.decode\n            : this.serializer.decode.bind(this.serializer);\n        this.reconnectTimer = new Timer(async () => {\n            this.disconnect();\n            this.connect();\n        }, this.reconnectAfterMs);\n        this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n        if (options === null || options === void 0 ? void 0 : options.worker) {\n            if (typeof window !== 'undefined' && !window.Worker) {\n                throw new Error('Web Worker is not supported');\n            }\n            this.worker = (options === null || options === void 0 ? void 0 : options.worker) || false;\n            this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;\n        }\n        this.accessToken = (options === null || options === void 0 ? void 0 : options.accessToken) || null;\n    }\n    /**\n     * Connects the socket, unless already connected.\n     */\n    connect() {\n        if (this.conn) {\n            return;\n        }\n        if (this.transport) {\n            this.conn = new this.transport(this.endpointURL(), undefined, {\n                headers: this.headers,\n            });\n            return;\n        }\n        if (NATIVE_WEBSOCKET_AVAILABLE) {\n            this.conn = new WebSocket(this.endpointURL());\n            this.setupConnection();\n            return;\n        }\n        this.conn = new WSWebSocketDummy(this.endpointURL(), undefined, {\n            close: () => {\n                this.conn = null;\n            },\n        });\n        import('ws').then(({ default: WS }) => {\n            this.conn = new WS(this.endpointURL(), undefined, {\n                headers: this.headers,\n            });\n            this.setupConnection();\n        });\n    }\n    /**\n     * Returns the URL of the websocket.\n     * @returns string The URL of the websocket.\n     */\n    endpointURL() {\n        return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));\n    }\n    /**\n     * Disconnects the socket.\n     *\n     * @param code A numeric status code to send on disconnect.\n     * @param reason A custom reason for the disconnect.\n     */\n    disconnect(code, reason) {\n        if (this.conn) {\n            this.conn.onclose = function () { }; // noop\n            if (code) {\n                this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n            }\n            else {\n                this.conn.close();\n            }\n            this.conn = null;\n            // remove open handles\n            this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n            this.reconnectTimer.reset();\n        }\n    }\n    /**\n     * Returns all created channels\n     */\n    getChannels() {\n        return this.channels;\n    }\n    /**\n     * Unsubscribes and removes a single channel\n     * @param channel A RealtimeChannel instance\n     */\n    async removeChannel(channel) {\n        const status = await channel.unsubscribe();\n        if (this.channels.length === 0) {\n            this.disconnect();\n        }\n        return status;\n    }\n    /**\n     * Unsubscribes and removes all channels\n     */\n    async removeAllChannels() {\n        const values_1 = await Promise.all(this.channels.map((channel) => channel.unsubscribe()));\n        this.disconnect();\n        return values_1;\n    }\n    /**\n     * Logs the message.\n     *\n     * For customized logging, `this.logger` can be overridden.\n     */\n    log(kind, msg, data) {\n        this.logger(kind, msg, data);\n    }\n    /**\n     * Returns the current state of the socket.\n     */\n    connectionState() {\n        switch (this.conn && this.conn.readyState) {\n            case SOCKET_STATES.connecting:\n                return CONNECTION_STATE.Connecting;\n            case SOCKET_STATES.open:\n                return CONNECTION_STATE.Open;\n            case SOCKET_STATES.closing:\n                return CONNECTION_STATE.Closing;\n            default:\n                return CONNECTION_STATE.Closed;\n        }\n    }\n    /**\n     * Returns `true` is the connection is open.\n     */\n    isConnected() {\n        return this.connectionState() === CONNECTION_STATE.Open;\n    }\n    channel(topic, params = { config: {} }) {\n        const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n        this.channels.push(chan);\n        return chan;\n    }\n    /**\n     * Push out a message if the socket is connected.\n     *\n     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n     */\n    push(data) {\n        const { topic, event, payload, ref } = data;\n        const callback = () => {\n            this.encode(data, (result) => {\n                var _a;\n                (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n            });\n        };\n        this.log('push', `${topic} ${event} (${ref})`, payload);\n        if (this.isConnected()) {\n            callback();\n        }\n        else {\n            this.sendBuffer.push(callback);\n        }\n    }\n    /**\n     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n     *\n     * If param is null it will use the `accessToken` callback function or the token set on the client.\n     *\n     * On callback used, it will set the value of the token internal to the client.\n     *\n     * @param token A JWT string to override the token set on the client.\n     */\n    async setAuth(token = null) {\n        let tokenToSend = token ||\n            (this.accessToken && (await this.accessToken())) ||\n            this.accessTokenValue;\n        if (tokenToSend) {\n            let parsed = null;\n            try {\n                parsed = JSON.parse(atob(tokenToSend.split('.')[1]));\n            }\n            catch (_error) { }\n            if (parsed && parsed.exp) {\n                let now = Math.floor(Date.now() / 1000);\n                let valid = now - parsed.exp < 0;\n                if (!valid) {\n                    this.log('auth', `InvalidJWTToken: Invalid value for JWT claim \"exp\" with value ${parsed.exp}`);\n                    return Promise.reject(`InvalidJWTToken: Invalid value for JWT claim \"exp\" with value ${parsed.exp}`);\n                }\n            }\n            this.accessTokenValue = tokenToSend;\n            this.channels.forEach((channel) => {\n                tokenToSend && channel.updateJoinPayload({ access_token: tokenToSend });\n                if (channel.joinedOnce && channel._isJoined()) {\n                    channel._push(CHANNEL_EVENTS.access_token, {\n                        access_token: tokenToSend,\n                    });\n                }\n            });\n        }\n    }\n    /**\n     * Sends a heartbeat message if the socket is connected.\n     */\n    async sendHeartbeat() {\n        var _a;\n        if (!this.isConnected()) {\n            return;\n        }\n        if (this.pendingHeartbeatRef) {\n            this.pendingHeartbeatRef = null;\n            this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n            (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n            return;\n        }\n        this.pendingHeartbeatRef = this._makeRef();\n        this.push({\n            topic: 'phoenix',\n            event: 'heartbeat',\n            payload: {},\n            ref: this.pendingHeartbeatRef,\n        });\n        this.setAuth();\n    }\n    /**\n     * Flushes send buffer\n     */\n    flushSendBuffer() {\n        if (this.isConnected() && this.sendBuffer.length > 0) {\n            this.sendBuffer.forEach((callback) => callback());\n            this.sendBuffer = [];\n        }\n    }\n    /**\n     * Return the next message ref, accounting for overflows\n     *\n     * @internal\n     */\n    _makeRef() {\n        let newRef = this.ref + 1;\n        if (newRef === this.ref) {\n            this.ref = 0;\n        }\n        else {\n            this.ref = newRef;\n        }\n        return this.ref.toString();\n    }\n    /**\n     * Unsubscribe from channels with the specified topic.\n     *\n     * @internal\n     */\n    _leaveOpenTopic(topic) {\n        let dupChannel = this.channels.find((c) => c.topic === topic && (c._isJoined() || c._isJoining()));\n        if (dupChannel) {\n            this.log('transport', `leaving duplicate topic \"${topic}\"`);\n            dupChannel.unsubscribe();\n        }\n    }\n    /**\n     * Removes a subscription from the socket.\n     *\n     * @param channel An open subscription.\n     *\n     * @internal\n     */\n    _remove(channel) {\n        this.channels = this.channels.filter((c) => c._joinRef() !== channel._joinRef());\n    }\n    /**\n     * Sets up connection handlers.\n     *\n     * @internal\n     */\n    setupConnection() {\n        if (this.conn) {\n            this.conn.binaryType = 'arraybuffer';\n            this.conn.onopen = () => this._onConnOpen();\n            this.conn.onerror = (error) => this._onConnError(error);\n            this.conn.onmessage = (event) => this._onConnMessage(event);\n            this.conn.onclose = (event) => this._onConnClose(event);\n        }\n    }\n    /** @internal */\n    _onConnMessage(rawMessage) {\n        this.decode(rawMessage.data, (msg) => {\n            let { topic, event, payload, ref } = msg;\n            if (ref && ref === this.pendingHeartbeatRef) {\n                this.pendingHeartbeatRef = null;\n            }\n            this.log('receive', `${payload.status || ''} ${topic} ${event} ${(ref && '(' + ref + ')') || ''}`, payload);\n            this.channels\n                .filter((channel) => channel._isMember(topic))\n                .forEach((channel) => channel._trigger(event, payload, ref));\n            this.stateChangeCallbacks.message.forEach((callback) => callback(msg));\n        });\n    }\n    /** @internal */\n    async _onConnOpen() {\n        this.log('transport', `connected to ${this.endpointURL()}`);\n        this.flushSendBuffer();\n        this.reconnectTimer.reset();\n        if (!this.worker) {\n            this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n            this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n        }\n        else {\n            if (this.workerUrl) {\n                this.log('worker', `starting worker for from ${this.workerUrl}`);\n            }\n            else {\n                this.log('worker', `starting default worker`);\n            }\n            const objectUrl = this._workerObjectUrl(this.workerUrl);\n            this.workerRef = new Worker(objectUrl);\n            this.workerRef.onerror = (error) => {\n                this.log('worker', 'worker error', error.message);\n                this.workerRef.terminate();\n            };\n            this.workerRef.onmessage = (event) => {\n                if (event.data.event === 'keepAlive') {\n                    this.sendHeartbeat();\n                }\n            };\n            this.workerRef.postMessage({\n                event: 'start',\n                interval: this.heartbeatIntervalMs,\n            });\n        }\n        this.stateChangeCallbacks.open.forEach((callback) => callback());\n    }\n    /** @internal */\n    _onConnClose(event) {\n        this.log('transport', 'close', event);\n        this._triggerChanError();\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.reconnectTimer.scheduleTimeout();\n        this.stateChangeCallbacks.close.forEach((callback) => callback(event));\n    }\n    /** @internal */\n    _onConnError(error) {\n        this.log('transport', error.message);\n        this._triggerChanError();\n        this.stateChangeCallbacks.error.forEach((callback) => callback(error));\n    }\n    /** @internal */\n    _triggerChanError() {\n        this.channels.forEach((channel) => channel._trigger(CHANNEL_EVENTS.error));\n    }\n    /** @internal */\n    _appendParams(url, params) {\n        if (Object.keys(params).length === 0) {\n            return url;\n        }\n        const prefix = url.match(/\\?/) ? '&' : '?';\n        const query = new URLSearchParams(params);\n        return `${url}${prefix}${query}`;\n    }\n    _workerObjectUrl(url) {\n        let result_url;\n        if (url) {\n            result_url = url;\n        }\n        else {\n            const blob = new Blob([WORKER_SCRIPT], { type: 'application/javascript' });\n            result_url = URL.createObjectURL(blob);\n        }\n        return result_url;\n    }\n}\nclass WSWebSocketDummy {\n    constructor(address, _protocols, options) {\n        this.binaryType = 'arraybuffer';\n        this.onclose = () => { };\n        this.onerror = () => { };\n        this.onmessage = () => { };\n        this.onopen = () => { };\n        this.readyState = SOCKET_STATES.connecting;\n        this.send = () => { };\n        this.url = null;\n        this.url = address;\n        this.close = options.close;\n    }\n}\n//# sourceMappingURL=RealtimeClient.js.map","import RealtimeClient from './RealtimeClient';\nimport RealtimeChannel, { REALTIME_LISTEN_TYPES, REALTIME_POSTGRES_CHANGES_LISTEN_EVENT, REALTIME_SUBSCRIBE_STATES, REALTIME_CHANNEL_STATES, } from './RealtimeChannel';\nimport RealtimePresence, { REALTIME_PRESENCE_LISTEN_EVENTS, } from './RealtimePresence';\nexport { RealtimePresence, RealtimeChannel, RealtimeClient, REALTIME_LISTEN_TYPES, REALTIME_POSTGRES_CHANGES_LISTEN_EVENT, REALTIME_PRESENCE_LISTEN_EVENTS, REALTIME_SUBSCRIBE_STATES, REALTIME_CHANNEL_STATES, };\n//# sourceMappingURL=index.js.map","export class StorageError extends Error {\n    constructor(message) {\n        super(message);\n        this.__isStorageError = true;\n        this.name = 'StorageError';\n    }\n}\nexport function isStorageError(error) {\n    return typeof error === 'object' && error !== null && '__isStorageError' in error;\n}\nexport class StorageApiError extends StorageError {\n    constructor(message, status) {\n        super(message);\n        this.name = 'StorageApiError';\n        this.status = status;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            status: this.status,\n        };\n    }\n}\nexport class StorageUnknownError extends StorageError {\n    constructor(message, originalError) {\n        super(message);\n        this.name = 'StorageUnknownError';\n        this.originalError = originalError;\n    }\n}\n//# sourceMappingURL=errors.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport const resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === 'undefined') {\n        _fetch = (...args) => import('@supabase/node-fetch').then(({ default: fetch }) => fetch(...args));\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\nexport const resolveResponse = () => __awaiter(void 0, void 0, void 0, function* () {\n    if (typeof Response === 'undefined') {\n        // @ts-ignore\n        return (yield import('@supabase/node-fetch')).Response;\n    }\n    return Response;\n});\nexport const recursiveToCamel = (item) => {\n    if (Array.isArray(item)) {\n        return item.map((el) => recursiveToCamel(el));\n    }\n    else if (typeof item === 'function' || item !== Object(item)) {\n        return item;\n    }\n    const result = {};\n    Object.entries(item).forEach(([key, value]) => {\n        const newKey = key.replace(/([-_][a-z])/gi, (c) => c.toUpperCase().replace(/[-_]/g, ''));\n        result[newKey] = recursiveToCamel(value);\n    });\n    return result;\n};\n//# sourceMappingURL=helpers.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StorageApiError, StorageUnknownError } from './errors';\nimport { resolveResponse } from './helpers';\nconst _getErrorMessage = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\nconst handleError = (error, reject, options) => __awaiter(void 0, void 0, void 0, function* () {\n    const Res = yield resolveResponse();\n    if (error instanceof Res && !(options === null || options === void 0 ? void 0 : options.noResolveJson)) {\n        error\n            .json()\n            .then((err) => {\n            reject(new StorageApiError(_getErrorMessage(err), error.status || 500));\n        })\n            .catch((err) => {\n            reject(new StorageUnknownError(_getErrorMessage(err), err));\n        });\n    }\n    else {\n        reject(new StorageUnknownError(_getErrorMessage(error), error));\n    }\n});\nconst _getRequestParams = (method, options, parameters, body) => {\n    const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };\n    if (method === 'GET') {\n        return params;\n    }\n    params.headers = Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers);\n    if (body) {\n        params.body = JSON.stringify(body);\n    }\n    return Object.assign(Object.assign({}, params), parameters);\n};\nfunction _handleRequest(fetcher, method, url, options, parameters, body) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => {\n            fetcher(url, _getRequestParams(method, options, parameters, body))\n                .then((result) => {\n                if (!result.ok)\n                    throw result;\n                if (options === null || options === void 0 ? void 0 : options.noResolveJson)\n                    return result;\n                return result.json();\n            })\n                .then((data) => resolve(data))\n                .catch((error) => handleError(error, reject, options));\n        });\n    });\n}\nexport function get(fetcher, url, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'GET', url, options, parameters);\n    });\n}\nexport function post(fetcher, url, body, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'POST', url, options, parameters, body);\n    });\n}\nexport function put(fetcher, url, body, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'PUT', url, options, parameters, body);\n    });\n}\nexport function head(fetcher, url, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'HEAD', url, Object.assign(Object.assign({}, options), { noResolveJson: true }), parameters);\n    });\n}\nexport function remove(fetcher, url, body, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'DELETE', url, options, parameters, body);\n    });\n}\n//# sourceMappingURL=fetch.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isStorageError, StorageError, StorageUnknownError } from '../lib/errors';\nimport { get, head, post, remove } from '../lib/fetch';\nimport { recursiveToCamel, resolveFetch } from '../lib/helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n        column: 'name',\n        order: 'asc',\n    },\n};\nconst DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false,\n};\nexport default class StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n        this.url = url;\n        this.headers = headers;\n        this.bucketId = bucketId;\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                let headers = Object.assign(Object.assign({}, this.headers), (method === 'POST' && { 'x-upsert': String(options.upsert) }));\n                const metadata = options.metadata;\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    if (metadata) {\n                        body.append('metadata', this.encodeMetadata(metadata));\n                    }\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                    if (metadata) {\n                        body.append('metadata', this.encodeMetadata(metadata));\n                    }\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                    if (metadata) {\n                        headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n                    }\n                }\n                if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n                    headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n                }\n                const cleanPath = this._removeEmptyFolders(path);\n                const _path = this._getFinalPath(cleanPath);\n                const res = yield this.fetch(`${this.url}/object/${_path}`, Object.assign({ method, body: body, headers }, ((options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {})));\n                const data = yield res.json();\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath, id: data.Id, fullPath: data.Key },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = data;\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    upload(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadToSignedUrl(path, token, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cleanPath = this._removeEmptyFolders(path);\n            const _path = this._getFinalPath(cleanPath);\n            const url = new URL(this.url + `/object/upload/sign/${_path}`);\n            url.searchParams.set('token', token);\n            try {\n                let body;\n                const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), { 'x-upsert': String(options.upsert) });\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const res = yield this.fetch(url.toString(), {\n                    method: 'PUT',\n                    body: body,\n                    headers,\n                });\n                const data = yield res.json();\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath, fullPath: data.Key },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = data;\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for 2 hours.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n     */\n    createSignedUploadUrl(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                const headers = Object.assign({}, this.headers);\n                if (options === null || options === void 0 ? void 0 : options.upsert) {\n                    headers['x-upsert'] = 'true';\n                }\n                const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers });\n                const url = new URL(this.url + data.url);\n                const token = url.searchParams.get('token');\n                if (!token) {\n                    throw new StorageError('No token returned by API');\n                }\n                return { data: { signedUrl: url.toString(), path, token }, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    update(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     * @param options The destination options.\n     */\n    move(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/move`, {\n                    bucketId: this.bucketId,\n                    sourceKey: fromPath,\n                    destinationKey: toPath,\n                    destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     * @param options The destination options.\n     */\n    copy(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/copy`, {\n                    bucketId: this.bucketId,\n                    sourceKey: fromPath,\n                    destinationKey: toPath,\n                    destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket,\n                }, { headers: this.headers });\n                return { data: { path: data.Key }, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    createSignedUrl(path, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, ((options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {})), { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n                data = { signedUrl };\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n    createSignedUrls(paths, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                return {\n                    data: data.map((datum) => (Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL\n                            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n                            : null }))),\n                    error: null,\n                };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    download(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n            const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n            const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n            const queryString = transformationQuery ? `?${transformationQuery}` : '';\n            try {\n                const _path = this._getFinalPath(path);\n                const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n                    headers: this.headers,\n                    noResolveJson: true,\n                });\n                const data = yield res.blob();\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the details of an existing file.\n     * @param path\n     */\n    info(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _path = this._getFinalPath(path);\n            try {\n                const data = yield get(this.fetch, `${this.url}/object/info/${_path}`, {\n                    headers: this.headers,\n                });\n                return { data: recursiveToCamel(data), error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Checks the existence of a file.\n     * @param path\n     */\n    exists(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _path = this._getFinalPath(path);\n            try {\n                yield head(this.fetch, `${this.url}/object/${_path}`, {\n                    headers: this.headers,\n                });\n                return { data: true, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error) && error instanceof StorageUnknownError) {\n                    const originalError = error.originalError;\n                    if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n                        return { data: false, error };\n                    }\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    getPublicUrl(path, options) {\n        const _path = this._getFinalPath(path);\n        const _queryString = [];\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n            ? `download=${options.download === true ? '' : options.download}`\n            : '';\n        if (downloadQueryParam !== '') {\n            _queryString.push(downloadQueryParam);\n        }\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        const renderPath = wantsTransformation ? 'render/image' : 'object';\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        if (transformationQuery !== '') {\n            _queryString.push(transformationQuery);\n        }\n        let queryString = _queryString.join('&');\n        if (queryString !== '') {\n            queryString = `?${queryString}`;\n        }\n        return {\n            data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n        };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n    remove(paths) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     */\n    list(path, options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || '' });\n                const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    encodeMetadata(metadata) {\n        return JSON.stringify(metadata);\n    }\n    toBase64(data) {\n        if (typeof Buffer !== 'undefined') {\n            return Buffer.from(data).toString('base64');\n        }\n        return btoa(data);\n    }\n    _getFinalPath(path) {\n        return `${this.bucketId}/${path}`;\n    }\n    _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n    transformOptsToQueryString(transform) {\n        const params = [];\n        if (transform.width) {\n            params.push(`width=${transform.width}`);\n        }\n        if (transform.height) {\n            params.push(`height=${transform.height}`);\n        }\n        if (transform.resize) {\n            params.push(`resize=${transform.resize}`);\n        }\n        if (transform.format) {\n            params.push(`format=${transform.format}`);\n        }\n        if (transform.quality) {\n            params.push(`quality=${transform.quality}`);\n        }\n        return params.join('&');\n    }\n}\n//# sourceMappingURL=StorageFileApi.js.map","// generated by genversion\nexport const version = '2.7.1';\n//# sourceMappingURL=version.js.map","import { version } from './version';\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `storage-js/${version}` };\n//# sourceMappingURL=constants.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DEFAULT_HEADERS } from '../lib/constants';\nimport { isStorageError } from '../lib/errors';\nimport { get, post, put, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nexport default class StorageBucketApi {\n    constructor(url, headers = {}, fetch) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Retrieves the details of all Storage buckets within an existing project.\n     */\n    listBuckets() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n    getBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     * @returns newly created bucket id\n     */\n    createBucket(id, options = {\n        public: false,\n    }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket`, {\n                    id,\n                    name: id,\n                    public: options.public,\n                    file_size_limit: options.fileSizeLimit,\n                    allowed_mime_types: options.allowedMimeTypes,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Updates a Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are updating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     */\n    updateBucket(id, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {\n                    id,\n                    name: id,\n                    public: options.public,\n                    file_size_limit: options.fileSizeLimit,\n                    allowed_mime_types: options.allowedMimeTypes,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n    emptyBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n    deleteBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n}\n//# sourceMappingURL=StorageBucketApi.js.map","import StorageFileApi from './packages/StorageFileApi';\nimport StorageBucketApi from './packages/StorageBucketApi';\nexport class StorageClient extends StorageBucketApi {\n    constructor(url, headers = {}, fetch) {\n        super(url, headers, fetch);\n    }\n    /**\n     * Perform file operation in a bucket.\n     *\n     * @param id The bucket id to operate on.\n     */\n    from(id) {\n        return new StorageFileApi(this.url, this.headers, id, this.fetch);\n    }\n}\n//# sourceMappingURL=StorageClient.js.map","export const version = '2.48.1';\n//# sourceMappingURL=version.js.map","import { version } from './version';\nlet JS_ENV = '';\n// @ts-ignore\nif (typeof Deno !== 'undefined') {\n    JS_ENV = 'deno';\n}\nelse if (typeof document !== 'undefined') {\n    JS_ENV = 'web';\n}\nelse if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    JS_ENV = 'react-native';\n}\nelse {\n    JS_ENV = 'node';\n}\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `supabase-js-${JS_ENV}/${version}` };\nexport const DEFAULT_GLOBAL_OPTIONS = {\n    headers: DEFAULT_HEADERS,\n};\nexport const DEFAULT_DB_OPTIONS = {\n    schema: 'public',\n};\nexport const DEFAULT_AUTH_OPTIONS = {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    flowType: 'implicit',\n};\nexport const DEFAULT_REALTIME_OPTIONS = {};\n//# sourceMappingURL=constants.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// @ts-ignore\nimport nodeFetch, { Headers as NodeFetchHeaders } from '@supabase/node-fetch';\nexport const resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === 'undefined') {\n        _fetch = nodeFetch;\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\nexport const resolveHeadersConstructor = () => {\n    if (typeof Headers === 'undefined') {\n        return NodeFetchHeaders;\n    }\n    return Headers;\n};\nexport const fetchWithAuth = (supabaseKey, getAccessToken, customFetch) => {\n    const fetch = resolveFetch(customFetch);\n    const HeadersConstructor = resolveHeadersConstructor();\n    return (input, init) => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        const accessToken = (_a = (yield getAccessToken())) !== null && _a !== void 0 ? _a : supabaseKey;\n        let headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);\n        if (!headers.has('apikey')) {\n            headers.set('apikey', supabaseKey);\n        }\n        if (!headers.has('Authorization')) {\n            headers.set('Authorization', `Bearer ${accessToken}`);\n        }\n        return fetch(input, Object.assign(Object.assign({}, init), { headers }));\n    });\n};\n//# sourceMappingURL=fetch.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport function uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\nexport function stripTrailingSlash(url) {\n    return url.replace(/\\/$/, '');\n}\nexport const isBrowser = () => typeof window !== 'undefined';\nexport function applySettingDefaults(options, defaults) {\n    const { db: dbOptions, auth: authOptions, realtime: realtimeOptions, global: globalOptions, } = options;\n    const { db: DEFAULT_DB_OPTIONS, auth: DEFAULT_AUTH_OPTIONS, realtime: DEFAULT_REALTIME_OPTIONS, global: DEFAULT_GLOBAL_OPTIONS, } = defaults;\n    const result = {\n        db: Object.assign(Object.assign({}, DEFAULT_DB_OPTIONS), dbOptions),\n        auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), authOptions),\n        realtime: Object.assign(Object.assign({}, DEFAULT_REALTIME_OPTIONS), realtimeOptions),\n        global: Object.assign(Object.assign({}, DEFAULT_GLOBAL_OPTIONS), globalOptions),\n        accessToken: () => __awaiter(this, void 0, void 0, function* () { return ''; }),\n    };\n    if (options.accessToken) {\n        result.accessToken = options.accessToken;\n    }\n    else {\n        // hack around Required<>\n        delete result.accessToken;\n    }\n    return result;\n}\n//# sourceMappingURL=helpers.js.map","import { AuthClient } from '@supabase/auth-js';\nexport class SupabaseAuthClient extends AuthClient {\n    constructor(options) {\n        super(options);\n    }\n}\n//# sourceMappingURL=SupabaseAuthClient.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient, } from '@supabase/postgrest-js';\nimport { RealtimeClient, } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_GLOBAL_OPTIONS, DEFAULT_DB_OPTIONS, DEFAULT_AUTH_OPTIONS, DEFAULT_REALTIME_OPTIONS, } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n    /**\n     * Create a new client for use in the browser.\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n     * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.realtime Options passed along to realtime-js constructor.\n     * @param options.global.fetch A custom fetch implementation.\n     * @param options.global.headers Any additional headers to send with each network request.\n     */\n    constructor(supabaseUrl, supabaseKey, options) {\n        var _a, _b, _c;\n        this.supabaseUrl = supabaseUrl;\n        this.supabaseKey = supabaseKey;\n        if (!supabaseUrl)\n            throw new Error('supabaseUrl is required.');\n        if (!supabaseKey)\n            throw new Error('supabaseKey is required.');\n        const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n        this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws');\n        this.authUrl = `${_supabaseUrl}/auth/v1`;\n        this.storageUrl = `${_supabaseUrl}/storage/v1`;\n        this.functionsUrl = `${_supabaseUrl}/functions/v1`;\n        // default storage key uses the supabase project ref as a namespace\n        const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`;\n        const DEFAULTS = {\n            db: DEFAULT_DB_OPTIONS,\n            realtime: DEFAULT_REALTIME_OPTIONS,\n            auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),\n            global: DEFAULT_GLOBAL_OPTIONS,\n        };\n        const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n        this.storageKey = (_a = settings.auth.storageKey) !== null && _a !== void 0 ? _a : '';\n        this.headers = (_b = settings.global.headers) !== null && _b !== void 0 ? _b : {};\n        if (!settings.accessToken) {\n            this.auth = this._initSupabaseAuthClient((_c = settings.auth) !== null && _c !== void 0 ? _c : {}, this.headers, settings.global.fetch);\n        }\n        else {\n            this.accessToken = settings.accessToken;\n            this.auth = new Proxy({}, {\n                get: (_, prop) => {\n                    throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(prop)} is not possible`);\n                },\n            });\n        }\n        this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global.fetch);\n        this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers, accessToken: this._getAccessToken.bind(this) }, settings.realtime));\n        this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n            headers: this.headers,\n            schema: settings.db.schema,\n            fetch: this.fetch,\n        });\n        if (!settings.accessToken) {\n            this._listenForAuthEvents();\n        }\n    }\n    /**\n     * Supabase Functions allows you to deploy and invoke edge functions.\n     */\n    get functions() {\n        return new FunctionsClient(this.functionsUrl, {\n            headers: this.headers,\n            customFetch: this.fetch,\n        });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n    get storage() {\n        return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        return this.rest.from(relation);\n    }\n    // NOTE: signatures must be kept in sync with PostgrestClient.schema\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n    schema(schema) {\n        return this.rest.schema(schema);\n    }\n    // NOTE: signatures must be kept in sync with PostgrestClient.rpc\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, options = {}) {\n        return this.rest.rpc(fn, args, options);\n    }\n    /**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */\n    channel(name, opts = { config: {} }) {\n        return this.realtime.channel(name, opts);\n    }\n    /**\n     * Returns all Realtime channels.\n     */\n    getChannels() {\n        return this.realtime.getChannels();\n    }\n    /**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */\n    removeChannel(channel) {\n        return this.realtime.removeChannel(channel);\n    }\n    /**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */\n    removeAllChannels() {\n        return this.realtime.removeAllChannels();\n    }\n    _getAccessToken() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.accessToken) {\n                return yield this.accessToken();\n            }\n            const { data } = yield this.auth.getSession();\n            return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\n        });\n    }\n    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey, flowType, lock, debug, }, headers, fetch) {\n        const authHeaders = {\n            Authorization: `Bearer ${this.supabaseKey}`,\n            apikey: `${this.supabaseKey}`,\n        };\n        return new SupabaseAuthClient({\n            url: this.authUrl,\n            headers: Object.assign(Object.assign({}, authHeaders), headers),\n            storageKey: storageKey,\n            autoRefreshToken,\n            persistSession,\n            detectSessionInUrl,\n            storage,\n            flowType,\n            lock,\n            debug,\n            fetch,\n            // auth checks if there is a custom authorizaiton header using this flag\n            // so it knows whether to return an error when getUser is called with no session\n            hasCustomAuthorizationHeader: 'Authorization' in this.headers,\n        });\n    }\n    _initRealtimeClient(options) {\n        return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));\n    }\n    _listenForAuthEvents() {\n        let data = this.auth.onAuthStateChange((event, session) => {\n            this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\n        });\n        return data;\n    }\n    _handleTokenChanged(event, source, token) {\n        if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n            this.changedAccessToken !== token) {\n            this.changedAccessToken = token;\n        }\n        else if (event === 'SIGNED_OUT') {\n            this.realtime.setAuth();\n            if (source == 'STORAGE')\n                this.auth.signOut();\n            this.changedAccessToken = undefined;\n        }\n    }\n}\n//# sourceMappingURL=SupabaseClient.js.map","import SupabaseClient from './SupabaseClient';\nexport * from '@supabase/auth-js';\nexport { PostgrestError, } from '@supabase/postgrest-js';\nexport { FunctionsHttpError, FunctionsFetchError, FunctionsRelayError, FunctionsError, FunctionRegion, } from '@supabase/functions-js';\nexport * from '@supabase/realtime-js';\nexport { default as SupabaseClient } from './SupabaseClient';\n/**\n * Creates a new Supabase Client.\n */\nexport const createClient = (supabaseUrl, supabaseKey, options) => {\n    return new SupabaseClient(supabaseUrl, supabaseKey, options);\n};\n//# sourceMappingURL=index.js.map","'use strict';\n\nmodule.exports = function () {\n  throw new Error(\n    'ws does not work in the browser. Browser clients must use the native ' +\n      'WebSocket object'\n  );\n};\n"],"names":["SOCKET_STATES","constants_CHANNEL_STATES","CHANNEL_EVENTS","TRANSPORTS","CONNECTION_STATE","PostgresTypes","REALTIME_PRESENCE_LISTEN_EVENTS","REALTIME_POSTGRES_CHANGES_LISTEN_EVENT","REALTIME_LISTEN_TYPES","REALTIME_SUBSCRIBE_STATES","DEFAULT_HEADERS","CHANNEL_STATES","Serializer","constructor","HEADER_LENGTH","decode","rawPayload","callback","ArrayBuffer","_binaryDecode","JSON","parse","buffer","view","DataView","decoder","TextDecoder","_decodeBroadcast","topicSize","getUint8","eventSize","offset","topic","slice","event","ref","payload","byteLength","Timer","timerCalc","timer","undefined","tries","reset","clearTimeout","scheduleTimeout","setTimeout","convertChangeData","columns","record","options","_a","skipTypes","Object","keys","reduce","acc","rec_key","convertColumn","columnName","column","find","x","name","colType","type","value","includes","convertCell","noop","charAt","toArray","length","bool","toBoolean","float4","float8","int2","int4","int8","numeric","oid","toNumber","json","jsonb","toJson","timestamp","toTimestampString","abstime","date","daterange","int4range","int8range","money","reltime","text","time","timestamptz","timetz","tsrange","tstzrange","parsedValue","parseFloat","Number","isNaN","error","console","log","lastIdx","closeBrace","openBrace","arr","valTrim","_","split","map","val","replace","httpEndpointURL","url","socketUrl","Push","channel","timeout","sent","timeoutTimer","receivedResp","recHooks","refEvent","resend","_cancelRefEvent","send","_hasReceived","startTimeout","socket","push","join_ref","_joinRef","updatePayload","assign","receive","status","response","_makeRef","_replyEventName","_on","_cancelTimeout","_matchReceive","trigger","_trigger","destroy","_off","filter","h","forEach","RealtimePresence","opts","state","pendingDiffs","joinRef","caller","onJoin","onLeave","onSync","events","diff","syncState","newState","syncDiff","inPendingSyncState","key","currentPresences","newPresences","leftPresences","currentState","cloneDeep","transformedState","transformState","joins","leaves","presences","newPresenceRefs","m","presence_ref","curPresenceRefs","joinedPresences","indexOf","joinedPresenceRefs","curPresences","unshift","presenceRefsToRemove","obj","func","getOwnPropertyNames","metas","presence","stringify","RealtimeChannel","params","config","bindings","closed","joinedOnce","pushBuffer","subTopic","broadcast","ack","self","private","joinPush","join","rejoinTimer","_rejoinUntilConnected","reconnectAfterMs","joined","pushEvent","_onClose","_remove","_onError","_isLeaving","_isClosed","reason","errored","_isJoining","reply","broadcastEndpointURL","endPoint","subscribe","_b","isConnected","connect","isPrivate","CHANNEL_ERROR","e","CLOSED","accessTokenPayload","postgres_changes","r","accessTokenValue","access_token","updateJoinPayload","_rejoin","setAuth","SUBSCRIBED","clientPostgresBindings","bindingsLen","newPostgresBindings","i","clientPostgresBinding","schema","table","serverPostgresFilter","id","unsubscribe","values","TIMED_OUT","presenceState","track","untrack","on","args","_canPush","Promise","_c","_push","resolve","endpoint_payload","method","headers","Authorization","apikey","apiKey","body","messages","_fetchWithTimeout","cancel","ok","leaving","onClose","close","leavePush","leave","controller","AbortController","abort","fetch","signal","_onMessage","_event","_ref","_isMember","typeLower","toLocaleLowerCase","handledPayload","bind","_d","_e","_f","bindId","bindEvent","ids","data","postgresChanges","commit_timestamp","errors","eventType","new","old","_getPayloadRecords","_isJoined","joining","binding","isEqual","obj1","obj2","k","_leaveOpenTopic","records","old_record","RealtimeClient_noop","NATIVE_WEBSOCKET_AVAILABLE","WebSocket","WORKER_SCRIPT","RealtimeClient","channels","httpEndpoint","heartbeatIntervalMs","heartbeatTimer","pendingHeartbeatRef","logger","conn","sendBuffer","serializer","stateChangeCallbacks","open","message","accessToken","_resolveFetch","_fetch","customFetch","then","__webpack_require__","default","websocket","transport","encode","reconnectTimer","disconnect","worker","window","Worker","workerUrl","endpointURL","setupConnection","WSWebSocketDummy","t","WS","_appendParams","vsn","code","onclose","clearInterval","getChannels","removeChannel","removeAllChannels","values_1","all","kind","msg","connectionState","readyState","connecting","Connecting","Open","closing","Closing","Closed","chan","result","token","tokenToSend","parsed","atob","_error","exp","now","floor","Date","reject","sendHeartbeat","flushSendBuffer","newRef","toString","dupChannel","c","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","_onConnMessage","_onConnClose","rawMessage","objectUrl","_workerObjectUrl","workerRef","terminate","postMessage","interval","setInterval","_triggerChanError","prefix","match","query","URLSearchParams","result_url","blob","Blob","URL","createObjectURL","address","_protocols","StorageError","Error","__isStorageError","isStorageError","StorageApiError","toJSON","StorageUnknownError","originalError","resolveFetch","resolveResponse","__awaiter","thisArg","_arguments","P","generator","fulfilled","step","next","rejected","done","adopt","apply","Response","recursiveToCamel","Array","isArray","item","el","entries","toUpperCase","fetch_awaiter","_getErrorMessage","err","error_description","handleError","noResolveJson","catch","_getRequestParams","parameters","_handleRequest","fetcher","get","post","remove","StorageFileApi_awaiter","DEFAULT_SEARCH_OPTIONS","limit","sortBy","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","bucketId","uploadOrUpdate","path","fileBody","fileOptions","String","metadata","FormData","append","encodeMetadata","toBase64","cleanPath","_removeEmptyFolders","_path","_getFinalPath","res","duplex","Id","fullPath","Key","upload","uploadToSignedUrl","searchParams","set","createSignedUploadUrl","signedUrl","update","move","fromPath","toPath","sourceKey","destinationKey","destinationBucket","copy","createSignedUrl","expiresIn","transform","downloadQueryParam","download","encodeURI","signedURL","createSignedUrls","paths","datum","wantsTransformation","transformationQuery","transformOptsToQueryString","queryString","info","exists","head","getPublicUrl","_queryString","publicUrl","prefixes","list","Buffer","from","btoa","width","height","resize","format","quality","constants_DEFAULT_HEADERS","StorageBucketApi_awaiter","StorageBucketApi","listBuckets","getBucket","createBucket","public","file_size_limit","fileSizeLimit","allowed_mime_types","allowedMimeTypes","updateBucket","put","emptyBucket","deleteBucket","StorageClient","JS_ENV","Deno","document","navigator","product","DEFAULT_GLOBAL_OPTIONS","DEFAULT_DB_OPTIONS","DEFAULT_AUTH_OPTIONS","autoRefreshToken","persistSession","detectSessionInUrl","flowType","DEFAULT_REALTIME_OPTIONS","fetch_resolveFetch","browser","resolveHeadersConstructor","Headers","fetchWithAuth","supabaseKey","getAccessToken","HeadersConstructor","input","init","lib_fetch_awaiter","has","SupabaseAuthClient","dist_module","LY","SupabaseClient","supabaseUrl","_supabaseUrl","realtimeUrl","authUrl","storageUrl","functionsUrl","defaultStorageKey","hostname","settings","applySettingDefaults","defaults","db","dbOptions","auth","authOptions","realtime","realtimeOptions","global","globalOptions","storageKey","Proxy","prop","_initSupabaseAuthClient","_getAccessToken","_initRealtimeClient","rest","wrapper","po","_listenForAuthEvents","functions","FunctionsClient","b","storage","relation","rpc","fn","getSession","session","lock","debug","authHeaders","hasCustomAuthorizationHeader","onAuthStateChange","_handleTokenChanged","source","changedAccessToken","signOut","createClient","module","exports"],"sourceRoot":""}