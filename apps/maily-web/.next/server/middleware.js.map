{"version":3,"file":"middleware.js","mappings":"kFAAAA,CAAAA,EAAAC,OAAA,CAAAC,QAAA,yCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,qKCIA,IAAMC,EAAgB,CACpB,eACA,eACA,uBACA,qBACD,CAEM,eAAeC,EAAWC,CAAgB,EAC/C,IAAMC,EAAMC,EAAAA,EAAYA,CAACC,IAAI,GACvBC,EAAWC,CAAAA,EAAAA,EAAAA,sBAAAA,EAAuB,CAAEL,IAAAA,EAAKC,IAAAA,CAAI,GAC7C,CACJK,KAAM,CAAEC,QAAAA,CAAO,CAAE,CAClB,CAAG,MAAMH,EAASI,IAAI,CAACC,UAAU,GAE5BC,EAAgBZ,EAAca,IAAI,CAAC,GACvCX,EAAIY,OAAO,CAACC,QAAQ,CAACC,UAAU,CAACC,IAIlC,GAAIR,GAAWG,EACb,OAAOR,EAAAA,EAAYA,CAACc,QAAQ,CAAC,IAAIC,IAAI,aAAcjB,EAAIkB,GAAG,GAI5D,GAAI,CAACX,GAAW,CAACG,EAAe,CAC9B,IAAMS,EAAc,IAAIF,IAAI,eAAgBjB,EAAIkB,GAAG,EAEnD,OADAC,EAAYC,YAAY,CAACC,GAAG,CAAC,WAAYrB,EAAIY,OAAO,CAACC,QAAQ,EACtDX,EAAAA,EAAYA,CAACc,QAAQ,CAACG,EAC/B,CAEA,OAAOlB,CACT,CAEO,IAAMqB,EAAS,CACpBC,QAAS,CASP,2DACD,EC5CHC,EAAA,CACA,GAAOC,CAAI,EAEXC,EAAAF,EAAAzB,UAAA,EAAAyB,EAAAG,OAAA,CACAC,EAAA,cACA,sBAAAF,EACA,+BAAuCE,EAAK,2DAE7B,SAAAC,EAAAC,CAAA,EACf,MAAW,GAAAC,EAAAC,CAAA,EAAO,CAClB,GAAAF,CAAA,CACAF,KAAAA,EACAF,QAAAA,CACA,EACA","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./middleware.ts","webpack://_N_E/"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nconst PUBLIC_ROUTES = [\n  '/auth/signin',\n  '/auth/signup',\n  '/auth/reset-password',\n  '/auth/verify-email',\n]\n\nexport async function middleware(req: NextRequest) {\n  const res = NextResponse.next()\n  const supabase = createMiddlewareClient({ req, res })\n  const {\n    data: { session },\n  } = await supabase.auth.getSession()\n\n  const isPublicRoute = PUBLIC_ROUTES.some((route) =>\n    req.nextUrl.pathname.startsWith(route)\n  )\n\n  // Redirect authenticated users away from auth pages\n  if (session && isPublicRoute) {\n    return NextResponse.redirect(new URL('/dashboard', req.url))\n  }\n\n  // Redirect unauthenticated users to sign in page\n  if (!session && !isPublicRoute) {\n    const redirectUrl = new URL('/auth/signin', req.url)\n    redirectUrl.searchParams.set('redirect', req.nextUrl.pathname)\n    return NextResponse.redirect(redirectUrl)\n  }\n\n  return res\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public (public files)\n     * - api (API routes)\n     */\n    '/((?!_next/static|_next/image|favicon.ico|public|api).*)',\n  ],\n} ","import \"next/dist/server/web/globals\";\nimport { adapter } from \"next/dist/server/web/adapter\";\n// Import the userland code.\nimport * as _mod from \"private-next-root-dir/middleware.ts\";\nconst mod = {\n    ..._mod\n};\nconst handler = mod.middleware || mod.default;\nconst page = \"/middleware\";\nif (typeof handler !== \"function\") {\n    throw new Error(`The Middleware \"${page}\" must export a \\`middleware\\` or a \\`default\\` function`);\n}\nexport default function nHandler(opts) {\n    return adapter({\n        ...opts,\n        page,\n        handler\n    });\n}\n\n//# sourceMappingURL=middleware.js.map"],"names":["module","exports","require","PUBLIC_ROUTES","middleware","req","res","NextResponse","next","supabase","createMiddlewareClient","data","session","auth","getSession","isPublicRoute","some","nextUrl","pathname","startsWith","route","redirect","URL","url","redirectUrl","searchParams","set","config","matcher","mod","middleware_namespaceObject","handler","default","page","nHandler","opts","adapter","C"],"sourceRoot":""}