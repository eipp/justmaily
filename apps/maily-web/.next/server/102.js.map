{"version":3,"file":"102.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@supabase/node-fetch/browser.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/cjs/constants.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/cjs/index.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/cjs/version.js","webpack://_N_E/./node_modules/@supabase/postgrest-js/dist/esm/wrapper.mjs","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/lib/version.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/lib/constants.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/lib/serializer.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/lib/timer.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/lib/transformers.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/lib/push.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js","webpack://_N_E/./node_modules/@supabase/realtime-js/dist/module/index.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/lib/errors.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/lib/helpers.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/lib/fetch.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/lib/version.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/lib/constants.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js","webpack://_N_E/./node_modules/@supabase/storage-js/dist/module/StorageClient.js","webpack://_N_E/./node_modules/@supabase/supabase-js/dist/module/lib/version.js","webpack://_N_E/./node_modules/@supabase/supabase-js/dist/module/lib/constants.js","webpack://_N_E/./node_modules/@supabase/supabase-js/dist/module/lib/fetch.js","webpack://_N_E/./node_modules/@supabase/supabase-js/dist/module/lib/helpers.js","webpack://_N_E/./node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js","webpack://_N_E/./node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js","webpack://_N_E/./node_modules/@supabase/supabase-js/dist/module/index.js","webpack://_N_E/./node_modules/ws/browser.js"],"sourcesContent":["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function() {\n    // the only reliable means to get the global object is\n    // `Function('return this')()`\n    // However, this causes CSP violations in Chrome apps.\n    if (typeof self !== 'undefined') { return self; }\n    if (typeof window !== 'undefined') { return window; }\n    if (typeof global !== 'undefined') { return global; }\n    throw new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nexport const fetch = globalObject.fetch;\n\nexport default globalObject.fetch.bind(globalObject);\n\nexport const Headers = globalObject.Headers;\nexport const Request = globalObject.Request;\nexport const Response = globalObject.Response;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// @ts-ignore\nconst node_fetch_1 = __importDefault(require(\"@supabase/node-fetch\"));\nconst PostgrestError_1 = __importDefault(require(\"./PostgrestError\"));\nclass PostgrestBuilder {\n    constructor(builder) {\n        this.shouldThrowOnError = false;\n        this.method = builder.method;\n        this.url = builder.url;\n        this.headers = builder.headers;\n        this.schema = builder.schema;\n        this.body = builder.body;\n        this.shouldThrowOnError = builder.shouldThrowOnError;\n        this.signal = builder.signal;\n        this.isMaybeSingle = builder.isMaybeSingle;\n        if (builder.fetch) {\n            this.fetch = builder.fetch;\n        }\n        else if (typeof fetch === 'undefined') {\n            this.fetch = node_fetch_1.default;\n        }\n        else {\n            this.fetch = fetch;\n        }\n    }\n    /**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */\n    throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n    }\n    /**\n     * Set an HTTP header for the request.\n     */\n    setHeader(name, value) {\n        this.headers = Object.assign({}, this.headers);\n        this.headers[name] = value;\n        return this;\n    }\n    then(onfulfilled, onrejected) {\n        // https://postgrest.org/en/stable/api.html#switching-schemas\n        if (this.schema === undefined) {\n            // skip\n        }\n        else if (['GET', 'HEAD'].includes(this.method)) {\n            this.headers['Accept-Profile'] = this.schema;\n        }\n        else {\n            this.headers['Content-Profile'] = this.schema;\n        }\n        if (this.method !== 'GET' && this.method !== 'HEAD') {\n            this.headers['Content-Type'] = 'application/json';\n        }\n        // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n        // https://github.com/supabase/postgrest-js/pull/247\n        const _fetch = this.fetch;\n        let res = _fetch(this.url.toString(), {\n            method: this.method,\n            headers: this.headers,\n            body: JSON.stringify(this.body),\n            signal: this.signal,\n        }).then(async (res) => {\n            var _a, _b, _c;\n            let error = null;\n            let data = null;\n            let count = null;\n            let status = res.status;\n            let statusText = res.statusText;\n            if (res.ok) {\n                if (this.method !== 'HEAD') {\n                    const body = await res.text();\n                    if (body === '') {\n                        // Prefer: return=minimal\n                    }\n                    else if (this.headers['Accept'] === 'text/csv') {\n                        data = body;\n                    }\n                    else if (this.headers['Accept'] &&\n                        this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n                        data = body;\n                    }\n                    else {\n                        data = JSON.parse(body);\n                    }\n                }\n                const countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n                const contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n                if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                }\n                // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n                // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n                if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n                    if (data.length > 1) {\n                        error = {\n                            // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n                            code: 'PGRST116',\n                            details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n                            hint: null,\n                            message: 'JSON object requested, multiple (or no) rows returned',\n                        };\n                        data = null;\n                        count = null;\n                        status = 406;\n                        statusText = 'Not Acceptable';\n                    }\n                    else if (data.length === 1) {\n                        data = data[0];\n                    }\n                    else {\n                        data = null;\n                    }\n                }\n            }\n            else {\n                const body = await res.text();\n                try {\n                    error = JSON.parse(body);\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (Array.isArray(error) && res.status === 404) {\n                        data = [];\n                        error = null;\n                        status = 200;\n                        statusText = 'OK';\n                    }\n                }\n                catch (_d) {\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (res.status === 404 && body === '') {\n                        status = 204;\n                        statusText = 'No Content';\n                    }\n                    else {\n                        error = {\n                            message: body,\n                        };\n                    }\n                }\n                if (error && this.isMaybeSingle && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('0 rows'))) {\n                    error = null;\n                    status = 200;\n                    statusText = 'OK';\n                }\n                if (error && this.shouldThrowOnError) {\n                    throw new PostgrestError_1.default(error);\n                }\n            }\n            const postgrestResponse = {\n                error,\n                data,\n                count,\n                status,\n                statusText,\n            };\n            return postgrestResponse;\n        });\n        if (!this.shouldThrowOnError) {\n            res = res.catch((fetchError) => {\n                var _a, _b, _c;\n                return ({\n                    error: {\n                        message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError'}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,\n                        details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''}`,\n                        hint: '',\n                        code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ''}`,\n                    },\n                    data: null,\n                    count: null,\n                    status: 0,\n                    statusText: '',\n                });\n            });\n        }\n        return res.then(onfulfilled, onrejected);\n    }\n}\nexports.default = PostgrestBuilder;\n//# sourceMappingURL=PostgrestBuilder.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PostgrestQueryBuilder_1 = __importDefault(require(\"./PostgrestQueryBuilder\"));\nconst PostgrestFilterBuilder_1 = __importDefault(require(\"./PostgrestFilterBuilder\"));\nconst constants_1 = require(\"./constants\");\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\nclass PostgrestClient {\n    // TODO: Add back shouldThrowOnError once we figure out the typings\n    /**\n     * Creates a PostgREST client.\n     *\n     * @param url - URL of the PostgREST endpoint\n     * @param options - Named parameters\n     * @param options.headers - Custom headers\n     * @param options.schema - Postgres schema to switch to\n     * @param options.fetch - Custom fetch\n     */\n    constructor(url, { headers = {}, schema, fetch, } = {}) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, constants_1.DEFAULT_HEADERS), headers);\n        this.schemaName = schema;\n        this.fetch = fetch;\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        const url = new URL(`${this.url}/${relation}`);\n        return new PostgrestQueryBuilder_1.default(url, {\n            headers: Object.assign({}, this.headers),\n            schema: this.schemaName,\n            fetch: this.fetch,\n        });\n    }\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n    schema(schema) {\n        return new PostgrestClient(this.url, {\n            headers: this.headers,\n            schema,\n            fetch: this.fetch,\n        });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, { head = false, get = false, count, } = {}) {\n        let method;\n        const url = new URL(`${this.url}/rpc/${fn}`);\n        let body;\n        if (head || get) {\n            method = head ? 'HEAD' : 'GET';\n            Object.entries(args)\n                // params with undefined value needs to be filtered out, otherwise it'll\n                // show up as `?param=undefined`\n                .filter(([_, value]) => value !== undefined)\n                // array values need special syntax\n                .map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(',')}}` : `${value}`])\n                .forEach(([name, value]) => {\n                url.searchParams.append(name, value);\n            });\n        }\n        else {\n            method = 'POST';\n            body = args;\n        }\n        const headers = Object.assign({}, this.headers);\n        if (count) {\n            headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url,\n            headers,\n            schema: this.schemaName,\n            body,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n}\nexports.default = PostgrestClient;\n//# sourceMappingURL=PostgrestClient.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Error format\n *\n * {@link https://postgrest.org/en/stable/api.html?highlight=options#errors-and-http-status-codes}\n */\nclass PostgrestError extends Error {\n    constructor(context) {\n        super(context.message);\n        this.name = 'PostgrestError';\n        this.details = context.details;\n        this.hint = context.hint;\n        this.code = context.code;\n    }\n}\nexports.default = PostgrestError;\n//# sourceMappingURL=PostgrestError.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PostgrestTransformBuilder_1 = __importDefault(require(\"./PostgrestTransformBuilder\"));\nclass PostgrestFilterBuilder extends PostgrestTransformBuilder_1.default {\n    /**\n     * Match only rows where `column` is equal to `value`.\n     *\n     * To check if the value of `column` is NULL, you should use `.is()` instead.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    eq(column, value) {\n        this.url.searchParams.append(column, `eq.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is not equal to `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    neq(column, value) {\n        this.url.searchParams.append(column, `neq.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is greater than `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    gt(column, value) {\n        this.url.searchParams.append(column, `gt.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is greater than or equal to `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    gte(column, value) {\n        this.url.searchParams.append(column, `gte.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is less than `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    lt(column, value) {\n        this.url.searchParams.append(column, `lt.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is less than or equal to `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    lte(column, value) {\n        this.url.searchParams.append(column, `lte.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches `pattern` case-sensitively.\n     *\n     * @param column - The column to filter on\n     * @param pattern - The pattern to match with\n     */\n    like(column, pattern) {\n        this.url.searchParams.append(column, `like.${pattern}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches all of `patterns` case-sensitively.\n     *\n     * @param column - The column to filter on\n     * @param patterns - The patterns to match with\n     */\n    likeAllOf(column, patterns) {\n        this.url.searchParams.append(column, `like(all).{${patterns.join(',')}}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches any of `patterns` case-sensitively.\n     *\n     * @param column - The column to filter on\n     * @param patterns - The patterns to match with\n     */\n    likeAnyOf(column, patterns) {\n        this.url.searchParams.append(column, `like(any).{${patterns.join(',')}}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches `pattern` case-insensitively.\n     *\n     * @param column - The column to filter on\n     * @param pattern - The pattern to match with\n     */\n    ilike(column, pattern) {\n        this.url.searchParams.append(column, `ilike.${pattern}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches all of `patterns` case-insensitively.\n     *\n     * @param column - The column to filter on\n     * @param patterns - The patterns to match with\n     */\n    ilikeAllOf(column, patterns) {\n        this.url.searchParams.append(column, `ilike(all).{${patterns.join(',')}}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches any of `patterns` case-insensitively.\n     *\n     * @param column - The column to filter on\n     * @param patterns - The patterns to match with\n     */\n    ilikeAnyOf(column, patterns) {\n        this.url.searchParams.append(column, `ilike(any).{${patterns.join(',')}}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` IS `value`.\n     *\n     * For non-boolean columns, this is only relevant for checking if the value of\n     * `column` is NULL by setting `value` to `null`.\n     *\n     * For boolean columns, you can also set `value` to `true` or `false` and it\n     * will behave the same way as `.eq()`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    is(column, value) {\n        this.url.searchParams.append(column, `is.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is included in the `values` array.\n     *\n     * @param column - The column to filter on\n     * @param values - The values array to filter with\n     */\n    in(column, values) {\n        const cleanedValues = Array.from(new Set(values))\n            .map((s) => {\n            // handle postgrest reserved characters\n            // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n            if (typeof s === 'string' && new RegExp('[,()]').test(s))\n                return `\"${s}\"`;\n            else\n                return `${s}`;\n        })\n            .join(',');\n        this.url.searchParams.append(column, `in.(${cleanedValues})`);\n        return this;\n    }\n    /**\n     * Only relevant for jsonb, array, and range columns. Match only rows where\n     * `column` contains every element appearing in `value`.\n     *\n     * @param column - The jsonb, array, or range column to filter on\n     * @param value - The jsonb, array, or range value to filter with\n     */\n    contains(column, value) {\n        if (typeof value === 'string') {\n            // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n            // keep it simple and accept a string\n            this.url.searchParams.append(column, `cs.${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // array\n            this.url.searchParams.append(column, `cs.{${value.join(',')}}`);\n        }\n        else {\n            // json\n            this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);\n        }\n        return this;\n    }\n    /**\n     * Only relevant for jsonb, array, and range columns. Match only rows where\n     * every element appearing in `column` is contained by `value`.\n     *\n     * @param column - The jsonb, array, or range column to filter on\n     * @param value - The jsonb, array, or range value to filter with\n     */\n    containedBy(column, value) {\n        if (typeof value === 'string') {\n            // range\n            this.url.searchParams.append(column, `cd.${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // array\n            this.url.searchParams.append(column, `cd.{${value.join(',')}}`);\n        }\n        else {\n            // json\n            this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);\n        }\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is greater than any element in `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeGt(column, range) {\n        this.url.searchParams.append(column, `sr.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is either contained in `range` or greater than any element in\n     * `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeGte(column, range) {\n        this.url.searchParams.append(column, `nxl.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is less than any element in `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeLt(column, range) {\n        this.url.searchParams.append(column, `sl.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is either contained in `range` or less than any element in\n     * `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeLte(column, range) {\n        this.url.searchParams.append(column, `nxr.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where `column` is\n     * mutually exclusive to `range` and there can be no element between the two\n     * ranges.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeAdjacent(column, range) {\n        this.url.searchParams.append(column, `adj.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for array and range columns. Match only rows where\n     * `column` and `value` have an element in common.\n     *\n     * @param column - The array or range column to filter on\n     * @param value - The array or range value to filter with\n     */\n    overlaps(column, value) {\n        if (typeof value === 'string') {\n            // range\n            this.url.searchParams.append(column, `ov.${value}`);\n        }\n        else {\n            // array\n            this.url.searchParams.append(column, `ov.{${value.join(',')}}`);\n        }\n        return this;\n    }\n    /**\n     * Only relevant for text and tsvector columns. Match only rows where\n     * `column` matches the query string in `query`.\n     *\n     * @param column - The text or tsvector column to filter on\n     * @param query - The query text to match with\n     * @param options - Named parameters\n     * @param options.config - The text search configuration to use\n     * @param options.type - Change how the `query` text is interpreted\n     */\n    textSearch(column, query, { config, type } = {}) {\n        let typePart = '';\n        if (type === 'plain') {\n            typePart = 'pl';\n        }\n        else if (type === 'phrase') {\n            typePart = 'ph';\n        }\n        else if (type === 'websearch') {\n            typePart = 'w';\n        }\n        const configPart = config === undefined ? '' : `(${config})`;\n        this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);\n        return this;\n    }\n    /**\n     * Match only rows where each column in `query` keys is equal to its\n     * associated value. Shorthand for multiple `.eq()`s.\n     *\n     * @param query - The object to filter with, with column names as keys mapped\n     * to their filter values\n     */\n    match(query) {\n        Object.entries(query).forEach(([column, value]) => {\n            this.url.searchParams.append(column, `eq.${value}`);\n        });\n        return this;\n    }\n    /**\n     * Match only rows which doesn't satisfy the filter.\n     *\n     * Unlike most filters, `opearator` and `value` are used as-is and need to\n     * follow [PostgREST\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n     * to make sure they are properly sanitized.\n     *\n     * @param column - The column to filter on\n     * @param operator - The operator to be negated to filter with, following\n     * PostgREST syntax\n     * @param value - The value to filter with, following PostgREST syntax\n     */\n    not(column, operator, value) {\n        this.url.searchParams.append(column, `not.${operator}.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows which satisfy at least one of the filters.\n     *\n     * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n     * to make sure it's properly sanitized.\n     *\n     * It's currently not possible to do an `.or()` filter across multiple tables.\n     *\n     * @param filters - The filters to use, following PostgREST syntax\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to filter on referenced tables\n     * instead of the parent table\n     * @param options.foreignTable - Deprecated, use `referencedTable` instead\n     */\n    or(filters, { foreignTable, referencedTable = foreignTable, } = {}) {\n        const key = referencedTable ? `${referencedTable}.or` : 'or';\n        this.url.searchParams.append(key, `(${filters})`);\n        return this;\n    }\n    /**\n     * Match only rows which satisfy the filter. This is an escape hatch - you\n     * should use the specific filter methods wherever possible.\n     *\n     * Unlike most filters, `opearator` and `value` are used as-is and need to\n     * follow [PostgREST\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n     * to make sure they are properly sanitized.\n     *\n     * @param column - The column to filter on\n     * @param operator - The operator to filter with, following PostgREST syntax\n     * @param value - The value to filter with, following PostgREST syntax\n     */\n    filter(column, operator, value) {\n        this.url.searchParams.append(column, `${operator}.${value}`);\n        return this;\n    }\n}\nexports.default = PostgrestFilterBuilder;\n//# sourceMappingURL=PostgrestFilterBuilder.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PostgrestFilterBuilder_1 = __importDefault(require(\"./PostgrestFilterBuilder\"));\nclass PostgrestQueryBuilder {\n    constructor(url, { headers = {}, schema, fetch, }) {\n        this.url = url;\n        this.headers = headers;\n        this.schema = schema;\n        this.fetch = fetch;\n    }\n    /**\n     * Perform a SELECT query on the table or view.\n     *\n     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n     *\n     * @param options - Named parameters\n     *\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     *\n     * @param options.count - Count algorithm to use to count rows in the table or view.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    select(columns, { head = false, count, } = {}) {\n        const method = head ? 'HEAD' : 'GET';\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (count) {\n            this.headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform an INSERT into the table or view.\n     *\n     * By default, inserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to insert. Pass an object to insert a single row\n     * or an array to insert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count inserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     *\n     * @param options.defaultToNull - Make missing fields default to `null`.\n     * Otherwise, use the default value for the column. Only applies for bulk\n     * inserts.\n     */\n    insert(values, { count, defaultToNull = true, } = {}) {\n        const method = 'POST';\n        const prefersHeaders = [];\n        if (this.headers['Prefer']) {\n            prefersHeaders.push(this.headers['Prefer']);\n        }\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (!defaultToNull) {\n            prefersHeaders.push('missing=default');\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        if (Array.isArray(values)) {\n            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n            if (columns.length > 0) {\n                const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`);\n                this.url.searchParams.set('columns', uniqueColumns.join(','));\n            }\n        }\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            body: values,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform an UPSERT on the table or view. Depending on the column(s) passed\n     * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n     * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n     * exist, or if it does exist, perform an alternative action depending on\n     * `ignoreDuplicates`.\n     *\n     * By default, upserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to upsert with. Pass an object to upsert a\n     * single row or an array to upsert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n     * duplicate rows are determined. Two rows are duplicates if all the\n     * `onConflict` columns are equal.\n     *\n     * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n     * `false`, duplicate rows are merged with existing rows.\n     *\n     * @param options.count - Count algorithm to use to count upserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     *\n     * @param options.defaultToNull - Make missing fields default to `null`.\n     * Otherwise, use the default value for the column. This only applies when\n     * inserting new rows, not when merging with existing rows under\n     * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\n     */\n    upsert(values, { onConflict, ignoreDuplicates = false, count, defaultToNull = true, } = {}) {\n        const method = 'POST';\n        const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`];\n        if (onConflict !== undefined)\n            this.url.searchParams.set('on_conflict', onConflict);\n        if (this.headers['Prefer']) {\n            prefersHeaders.push(this.headers['Prefer']);\n        }\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (!defaultToNull) {\n            prefersHeaders.push('missing=default');\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        if (Array.isArray(values)) {\n            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n            if (columns.length > 0) {\n                const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`);\n                this.url.searchParams.set('columns', uniqueColumns.join(','));\n            }\n        }\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            body: values,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform an UPDATE on the table or view.\n     *\n     * By default, updated rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param values - The values to update with\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count updated rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    update(values, { count, } = {}) {\n        const method = 'PATCH';\n        const prefersHeaders = [];\n        if (this.headers['Prefer']) {\n            prefersHeaders.push(this.headers['Prefer']);\n        }\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            body: values,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform a DELETE on the table or view.\n     *\n     * By default, deleted rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count deleted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    delete({ count, } = {}) {\n        const method = 'DELETE';\n        const prefersHeaders = [];\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n}\nexports.default = PostgrestQueryBuilder;\n//# sourceMappingURL=PostgrestQueryBuilder.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PostgrestBuilder_1 = __importDefault(require(\"./PostgrestBuilder\"));\nclass PostgrestTransformBuilder extends PostgrestBuilder_1.default {\n    /**\n     * Perform a SELECT on the query result.\n     *\n     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n     * return modified rows. By calling this method, modified rows are returned in\n     * `data`.\n     *\n     * @param columns - The columns to retrieve, separated by commas\n     */\n    select(columns) {\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (this.headers['Prefer']) {\n            this.headers['Prefer'] += ',';\n        }\n        this.headers['Prefer'] += 'return=representation';\n        return this;\n    }\n    /**\n     * Order the query result by `column`.\n     *\n     * You can call this method multiple times to order by multiple columns.\n     *\n     * You can order referenced tables, but it only affects the ordering of the\n     * parent table if you use `!inner` in the query.\n     *\n     * @param column - The column to order by\n     * @param options - Named parameters\n     * @param options.ascending - If `true`, the result will be in ascending order\n     * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n     * `null`s appear last.\n     * @param options.referencedTable - Set this to order a referenced table by\n     * its columns\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    order(column, { ascending = true, nullsFirst, foreignTable, referencedTable = foreignTable, } = {}) {\n        const key = referencedTable ? `${referencedTable}.order` : 'order';\n        const existingOrder = this.url.searchParams.get(key);\n        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n        return this;\n    }\n    /**\n     * Limit the query result by `count`.\n     *\n     * @param count - The maximum number of rows to return\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to limit rows of referenced\n     * tables instead of the parent table\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    limit(count, { foreignTable, referencedTable = foreignTable, } = {}) {\n        const key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(key, `${count}`);\n        return this;\n    }\n    /**\n     * Limit the query result by starting at an offset `from` and ending at the offset `to`.\n     * Only records within this range are returned.\n     * This respects the query order and if there is no order clause the range could behave unexpectedly.\n     * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n     * and fourth rows of the query.\n     *\n     * @param from - The starting index from which to limit the result\n     * @param to - The last index to which to limit the result\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to limit rows of referenced\n     * tables instead of the parent table\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    range(from, to, { foreignTable, referencedTable = foreignTable, } = {}) {\n        const keyOffset = typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`;\n        const keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(keyOffset, `${from}`);\n        // Range is inclusive, so add 1\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n        return this;\n    }\n    /**\n     * Set the AbortSignal for the fetch request.\n     *\n     * @param signal - The AbortSignal to use for the fetch request\n     */\n    abortSignal(signal) {\n        this.signal = signal;\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n     * returns an error.\n     */\n    single() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n     * this returns an error.\n     */\n    maybeSingle() {\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.method === 'GET') {\n            this.headers['Accept'] = 'application/json';\n        }\n        else {\n            this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        }\n        this.isMaybeSingle = true;\n        return this;\n    }\n    /**\n     * Return `data` as a string in CSV format.\n     */\n    csv() {\n        this.headers['Accept'] = 'text/csv';\n        return this;\n    }\n    /**\n     * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n     */\n    geojson() {\n        this.headers['Accept'] = 'application/geo+json';\n        return this;\n    }\n    /**\n     * Return `data` as the EXPLAIN plan for the query.\n     *\n     * You need to enable the\n     * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\n     * setting before using this method.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.analyze - If `true`, the query will be executed and the\n     * actual run time will be returned\n     *\n     * @param options.verbose - If `true`, the query identifier will be returned\n     * and `data` will include the output columns of the query\n     *\n     * @param options.settings - If `true`, include information on configuration\n     * parameters that affect query planning\n     *\n     * @param options.buffers - If `true`, include information on buffer usage\n     *\n     * @param options.wal - If `true`, include information on WAL record generation\n     *\n     * @param options.format - The format of the output, can be `\"text\"` (default)\n     * or `\"json\"`\n     */\n    explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = 'text', } = {}) {\n        var _a;\n        const options = [\n            analyze ? 'analyze' : null,\n            verbose ? 'verbose' : null,\n            settings ? 'settings' : null,\n            buffers ? 'buffers' : null,\n            wal ? 'wal' : null,\n        ]\n            .filter(Boolean)\n            .join('|');\n        // An Accept header can carry multiple media types but postgrest-js always sends one\n        const forMediatype = (_a = this.headers['Accept']) !== null && _a !== void 0 ? _a : 'application/json';\n        this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n        if (format === 'json')\n            return this;\n        else\n            return this;\n    }\n    /**\n     * Rollback the query.\n     *\n     * `data` will still be returned, but the query is not committed.\n     */\n    rollback() {\n        var _a;\n        if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n            this.headers['Prefer'] += ',tx=rollback';\n        }\n        else {\n            this.headers['Prefer'] = 'tx=rollback';\n        }\n        return this;\n    }\n    /**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     */\n    returns() {\n        return this;\n    }\n}\nexports.default = PostgrestTransformBuilder;\n//# sourceMappingURL=PostgrestTransformBuilder.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_HEADERS = void 0;\nconst version_1 = require(\"./version\");\nexports.DEFAULT_HEADERS = { 'X-Client-Info': `postgrest-js/${version_1.version}` };\n//# sourceMappingURL=constants.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PostgrestError = exports.PostgrestBuilder = exports.PostgrestTransformBuilder = exports.PostgrestFilterBuilder = exports.PostgrestQueryBuilder = exports.PostgrestClient = void 0;\n// Always update wrapper.mjs when updating this file.\nconst PostgrestClient_1 = __importDefault(require(\"./PostgrestClient\"));\nexports.PostgrestClient = PostgrestClient_1.default;\nconst PostgrestQueryBuilder_1 = __importDefault(require(\"./PostgrestQueryBuilder\"));\nexports.PostgrestQueryBuilder = PostgrestQueryBuilder_1.default;\nconst PostgrestFilterBuilder_1 = __importDefault(require(\"./PostgrestFilterBuilder\"));\nexports.PostgrestFilterBuilder = PostgrestFilterBuilder_1.default;\nconst PostgrestTransformBuilder_1 = __importDefault(require(\"./PostgrestTransformBuilder\"));\nexports.PostgrestTransformBuilder = PostgrestTransformBuilder_1.default;\nconst PostgrestBuilder_1 = __importDefault(require(\"./PostgrestBuilder\"));\nexports.PostgrestBuilder = PostgrestBuilder_1.default;\nconst PostgrestError_1 = __importDefault(require(\"./PostgrestError\"));\nexports.PostgrestError = PostgrestError_1.default;\nexports.default = {\n    PostgrestClient: PostgrestClient_1.default,\n    PostgrestQueryBuilder: PostgrestQueryBuilder_1.default,\n    PostgrestFilterBuilder: PostgrestFilterBuilder_1.default,\n    PostgrestTransformBuilder: PostgrestTransformBuilder_1.default,\n    PostgrestBuilder: PostgrestBuilder_1.default,\n    PostgrestError: PostgrestError_1.default,\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = void 0;\nexports.version = '0.0.0-automated';\n//# sourceMappingURL=version.js.map","import index from '../cjs/index.js'\nconst {\n  PostgrestClient,\n  PostgrestQueryBuilder,\n  PostgrestFilterBuilder,\n  PostgrestTransformBuilder,\n  PostgrestBuilder,\n  PostgrestError,\n} = index\n\nexport {\n  PostgrestBuilder,\n  PostgrestClient,\n  PostgrestFilterBuilder,\n  PostgrestQueryBuilder,\n  PostgrestTransformBuilder,\n  PostgrestError,\n}\n\n// compatibility with CJS output\nexport default {\n  PostgrestClient,\n  PostgrestQueryBuilder,\n  PostgrestFilterBuilder,\n  PostgrestTransformBuilder,\n  PostgrestBuilder,\n  PostgrestError,\n}\n","export const version = '2.11.2';\n//# sourceMappingURL=version.js.map","import { version } from './version';\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `realtime-js/${version}` };\nexport const VSN = '1.0.0';\nexport const DEFAULT_TIMEOUT = 10000;\nexport const WS_CLOSE_NORMAL = 1000;\nexport var SOCKET_STATES;\n(function (SOCKET_STATES) {\n    SOCKET_STATES[SOCKET_STATES[\"connecting\"] = 0] = \"connecting\";\n    SOCKET_STATES[SOCKET_STATES[\"open\"] = 1] = \"open\";\n    SOCKET_STATES[SOCKET_STATES[\"closing\"] = 2] = \"closing\";\n    SOCKET_STATES[SOCKET_STATES[\"closed\"] = 3] = \"closed\";\n})(SOCKET_STATES || (SOCKET_STATES = {}));\nexport var CHANNEL_STATES;\n(function (CHANNEL_STATES) {\n    CHANNEL_STATES[\"closed\"] = \"closed\";\n    CHANNEL_STATES[\"errored\"] = \"errored\";\n    CHANNEL_STATES[\"joined\"] = \"joined\";\n    CHANNEL_STATES[\"joining\"] = \"joining\";\n    CHANNEL_STATES[\"leaving\"] = \"leaving\";\n})(CHANNEL_STATES || (CHANNEL_STATES = {}));\nexport var CHANNEL_EVENTS;\n(function (CHANNEL_EVENTS) {\n    CHANNEL_EVENTS[\"close\"] = \"phx_close\";\n    CHANNEL_EVENTS[\"error\"] = \"phx_error\";\n    CHANNEL_EVENTS[\"join\"] = \"phx_join\";\n    CHANNEL_EVENTS[\"reply\"] = \"phx_reply\";\n    CHANNEL_EVENTS[\"leave\"] = \"phx_leave\";\n    CHANNEL_EVENTS[\"access_token\"] = \"access_token\";\n})(CHANNEL_EVENTS || (CHANNEL_EVENTS = {}));\nexport var TRANSPORTS;\n(function (TRANSPORTS) {\n    TRANSPORTS[\"websocket\"] = \"websocket\";\n})(TRANSPORTS || (TRANSPORTS = {}));\nexport var CONNECTION_STATE;\n(function (CONNECTION_STATE) {\n    CONNECTION_STATE[\"Connecting\"] = \"connecting\";\n    CONNECTION_STATE[\"Open\"] = \"open\";\n    CONNECTION_STATE[\"Closing\"] = \"closing\";\n    CONNECTION_STATE[\"Closed\"] = \"closed\";\n})(CONNECTION_STATE || (CONNECTION_STATE = {}));\n//# sourceMappingURL=constants.js.map","// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\nexport default class Serializer {\n    constructor() {\n        this.HEADER_LENGTH = 1;\n    }\n    decode(rawPayload, callback) {\n        if (rawPayload.constructor === ArrayBuffer) {\n            return callback(this._binaryDecode(rawPayload));\n        }\n        if (typeof rawPayload === 'string') {\n            return callback(JSON.parse(rawPayload));\n        }\n        return callback({});\n    }\n    _binaryDecode(buffer) {\n        const view = new DataView(buffer);\n        const decoder = new TextDecoder();\n        return this._decodeBroadcast(buffer, view, decoder);\n    }\n    _decodeBroadcast(buffer, view, decoder) {\n        const topicSize = view.getUint8(1);\n        const eventSize = view.getUint8(2);\n        let offset = this.HEADER_LENGTH + 2;\n        const topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n        offset = offset + topicSize;\n        const event = decoder.decode(buffer.slice(offset, offset + eventSize));\n        offset = offset + eventSize;\n        const data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));\n        return { ref: null, topic: topic, event: event, payload: data };\n    }\n}\n//# sourceMappingURL=serializer.js.map","/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n    constructor(callback, timerCalc) {\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n        this.timer = undefined;\n        this.tries = 0;\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n    }\n    reset() {\n        this.tries = 0;\n        clearTimeout(this.timer);\n    }\n    // Cancels any previous scheduleTimeout and schedules callback\n    scheduleTimeout() {\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() => {\n            this.tries = this.tries + 1;\n            this.callback();\n        }, this.timerCalc(this.tries + 1));\n    }\n}\n//# sourceMappingURL=timer.js.map","/**\n * Helpers to convert the change Payload into native JS types.\n */\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\nexport var PostgresTypes;\n(function (PostgresTypes) {\n    PostgresTypes[\"abstime\"] = \"abstime\";\n    PostgresTypes[\"bool\"] = \"bool\";\n    PostgresTypes[\"date\"] = \"date\";\n    PostgresTypes[\"daterange\"] = \"daterange\";\n    PostgresTypes[\"float4\"] = \"float4\";\n    PostgresTypes[\"float8\"] = \"float8\";\n    PostgresTypes[\"int2\"] = \"int2\";\n    PostgresTypes[\"int4\"] = \"int4\";\n    PostgresTypes[\"int4range\"] = \"int4range\";\n    PostgresTypes[\"int8\"] = \"int8\";\n    PostgresTypes[\"int8range\"] = \"int8range\";\n    PostgresTypes[\"json\"] = \"json\";\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\n    PostgresTypes[\"money\"] = \"money\";\n    PostgresTypes[\"numeric\"] = \"numeric\";\n    PostgresTypes[\"oid\"] = \"oid\";\n    PostgresTypes[\"reltime\"] = \"reltime\";\n    PostgresTypes[\"text\"] = \"text\";\n    PostgresTypes[\"time\"] = \"time\";\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n    PostgresTypes[\"timetz\"] = \"timetz\";\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n})(PostgresTypes || (PostgresTypes = {}));\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\nexport const convertChangeData = (columns, record, options = {}) => {\n    var _a;\n    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n    return Object.keys(record).reduce((acc, rec_key) => {\n        acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\n        return acc;\n    }, {});\n};\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\nexport const convertColumn = (columnName, columns, record, skipTypes) => {\n    const column = columns.find((x) => x.name === columnName);\n    const colType = column === null || column === void 0 ? void 0 : column.type;\n    const value = record[columnName];\n    if (colType && !skipTypes.includes(colType)) {\n        return convertCell(colType, value);\n    }\n    return noop(value);\n};\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} value The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\nexport const convertCell = (type, value) => {\n    // if data type is an array\n    if (type.charAt(0) === '_') {\n        const dataType = type.slice(1, type.length);\n        return toArray(value, dataType);\n    }\n    // If not null, convert to correct type.\n    switch (type) {\n        case PostgresTypes.bool:\n            return toBoolean(value);\n        case PostgresTypes.float4:\n        case PostgresTypes.float8:\n        case PostgresTypes.int2:\n        case PostgresTypes.int4:\n        case PostgresTypes.int8:\n        case PostgresTypes.numeric:\n        case PostgresTypes.oid:\n            return toNumber(value);\n        case PostgresTypes.json:\n        case PostgresTypes.jsonb:\n            return toJson(value);\n        case PostgresTypes.timestamp:\n            return toTimestampString(value); // Format to be consistent with PostgREST\n        case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n        case PostgresTypes.date: // To allow users to cast it based on Timezone\n        case PostgresTypes.daterange:\n        case PostgresTypes.int4range:\n        case PostgresTypes.int8range:\n        case PostgresTypes.money:\n        case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n        case PostgresTypes.text:\n        case PostgresTypes.time: // To allow users to cast it based on Timezone\n        case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n        case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n        case PostgresTypes.tsrange:\n        case PostgresTypes.tstzrange:\n            return noop(value);\n        default:\n            // Return the value for remaining types\n            return noop(value);\n    }\n};\nconst noop = (value) => {\n    return value;\n};\nexport const toBoolean = (value) => {\n    switch (value) {\n        case 't':\n            return true;\n        case 'f':\n            return false;\n        default:\n            return value;\n    }\n};\nexport const toNumber = (value) => {\n    if (typeof value === 'string') {\n        const parsedValue = parseFloat(value);\n        if (!Number.isNaN(parsedValue)) {\n            return parsedValue;\n        }\n    }\n    return value;\n};\nexport const toJson = (value) => {\n    if (typeof value === 'string') {\n        try {\n            return JSON.parse(value);\n        }\n        catch (error) {\n            console.log(`JSON parse error: ${error}`);\n            return value;\n        }\n    }\n    return value;\n};\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\nexport const toArray = (value, type) => {\n    if (typeof value !== 'string') {\n        return value;\n    }\n    const lastIdx = value.length - 1;\n    const closeBrace = value[lastIdx];\n    const openBrace = value[0];\n    // Confirm value is a Postgres array by checking curly brackets\n    if (openBrace === '{' && closeBrace === '}') {\n        let arr;\n        const valTrim = value.slice(1, lastIdx);\n        // TODO: find a better solution to separate Postgres array data\n        try {\n            arr = JSON.parse('[' + valTrim + ']');\n        }\n        catch (_) {\n            // WARNING: splitting on comma does not cover all edge cases\n            arr = valTrim ? valTrim.split(',') : [];\n        }\n        return arr.map((val) => convertCell(type, val));\n    }\n    return value;\n};\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\nexport const toTimestampString = (value) => {\n    if (typeof value === 'string') {\n        return value.replace(' ', 'T');\n    }\n    return value;\n};\nexport const httpEndpointURL = (socketUrl) => {\n    let url = socketUrl;\n    url = url.replace(/^ws/i, 'http');\n    url = url.replace(/(\\/socket\\/websocket|\\/socket|\\/websocket)\\/?$/i, '');\n    return url.replace(/\\/+$/, '');\n};\n//# sourceMappingURL=transformers.js.map","import { DEFAULT_TIMEOUT } from '../lib/constants';\nexport default class Push {\n    /**\n     * Initializes the Push\n     *\n     * @param channel The Channel\n     * @param event The event, for example `\"phx_join\"`\n     * @param payload The payload, for example `{user_id: 123}`\n     * @param timeout The push timeout in milliseconds\n     */\n    constructor(channel, event, payload = {}, timeout = DEFAULT_TIMEOUT) {\n        this.channel = channel;\n        this.event = event;\n        this.payload = payload;\n        this.timeout = timeout;\n        this.sent = false;\n        this.timeoutTimer = undefined;\n        this.ref = '';\n        this.receivedResp = null;\n        this.recHooks = [];\n        this.refEvent = null;\n    }\n    resend(timeout) {\n        this.timeout = timeout;\n        this._cancelRefEvent();\n        this.ref = '';\n        this.refEvent = null;\n        this.receivedResp = null;\n        this.sent = false;\n        this.send();\n    }\n    send() {\n        if (this._hasReceived('timeout')) {\n            return;\n        }\n        this.startTimeout();\n        this.sent = true;\n        this.channel.socket.push({\n            topic: this.channel.topic,\n            event: this.event,\n            payload: this.payload,\n            ref: this.ref,\n            join_ref: this.channel._joinRef(),\n        });\n    }\n    updatePayload(payload) {\n        this.payload = Object.assign(Object.assign({}, this.payload), payload);\n    }\n    receive(status, callback) {\n        var _a;\n        if (this._hasReceived(status)) {\n            callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);\n        }\n        this.recHooks.push({ status, callback });\n        return this;\n    }\n    startTimeout() {\n        if (this.timeoutTimer) {\n            return;\n        }\n        this.ref = this.channel.socket._makeRef();\n        this.refEvent = this.channel._replyEventName(this.ref);\n        const callback = (payload) => {\n            this._cancelRefEvent();\n            this._cancelTimeout();\n            this.receivedResp = payload;\n            this._matchReceive(payload);\n        };\n        this.channel._on(this.refEvent, {}, callback);\n        this.timeoutTimer = setTimeout(() => {\n            this.trigger('timeout', {});\n        }, this.timeout);\n    }\n    trigger(status, response) {\n        if (this.refEvent)\n            this.channel._trigger(this.refEvent, { status, response });\n    }\n    destroy() {\n        this._cancelRefEvent();\n        this._cancelTimeout();\n    }\n    _cancelRefEvent() {\n        if (!this.refEvent) {\n            return;\n        }\n        this.channel._off(this.refEvent, {});\n    }\n    _cancelTimeout() {\n        clearTimeout(this.timeoutTimer);\n        this.timeoutTimer = undefined;\n    }\n    _matchReceive({ status, response, }) {\n        this.recHooks\n            .filter((h) => h.status === status)\n            .forEach((h) => h.callback(response));\n    }\n    _hasReceived(status) {\n        return this.receivedResp && this.receivedResp.status === status;\n    }\n}\n//# sourceMappingURL=push.js.map","/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\nexport default class RealtimePresence {\n    /**\n     * Initializes the Presence.\n     *\n     * @param channel - The RealtimeChannel\n     * @param opts - The options,\n     *        for example `{events: {state: 'state', diff: 'diff'}}`\n     */\n    constructor(channel, opts) {\n        this.channel = channel;\n        this.state = {};\n        this.pendingDiffs = [];\n        this.joinRef = null;\n        this.caller = {\n            onJoin: () => { },\n            onLeave: () => { },\n            onSync: () => { },\n        };\n        const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n            state: 'presence_state',\n            diff: 'presence_diff',\n        };\n        this.channel._on(events.state, {}, (newState) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            this.joinRef = this.channel._joinRef();\n            this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\n            this.pendingDiffs.forEach((diff) => {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n            });\n            this.pendingDiffs = [];\n            onSync();\n        });\n        this.channel._on(events.diff, {}, (diff) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            if (this.inPendingSyncState()) {\n                this.pendingDiffs.push(diff);\n            }\n            else {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n                onSync();\n            }\n        });\n        this.onJoin((key, currentPresences, newPresences) => {\n            this.channel._trigger('presence', {\n                event: 'join',\n                key,\n                currentPresences,\n                newPresences,\n            });\n        });\n        this.onLeave((key, currentPresences, leftPresences) => {\n            this.channel._trigger('presence', {\n                event: 'leave',\n                key,\n                currentPresences,\n                leftPresences,\n            });\n        });\n        this.onSync(() => {\n            this.channel._trigger('presence', { event: 'sync' });\n        });\n    }\n    /**\n     * Used to sync the list of presences on the server with the\n     * client's state.\n     *\n     * An optional `onJoin` and `onLeave` callback can be provided to\n     * react to changes in the client's local presences across\n     * disconnects and reconnects with the server.\n     *\n     * @internal\n     */\n    static syncState(currentState, newState, onJoin, onLeave) {\n        const state = this.cloneDeep(currentState);\n        const transformedState = this.transformState(newState);\n        const joins = {};\n        const leaves = {};\n        this.map(state, (key, presences) => {\n            if (!transformedState[key]) {\n                leaves[key] = presences;\n            }\n        });\n        this.map(transformedState, (key, newPresences) => {\n            const currentPresences = state[key];\n            if (currentPresences) {\n                const newPresenceRefs = newPresences.map((m) => m.presence_ref);\n                const curPresenceRefs = currentPresences.map((m) => m.presence_ref);\n                const joinedPresences = newPresences.filter((m) => curPresenceRefs.indexOf(m.presence_ref) < 0);\n                const leftPresences = currentPresences.filter((m) => newPresenceRefs.indexOf(m.presence_ref) < 0);\n                if (joinedPresences.length > 0) {\n                    joins[key] = joinedPresences;\n                }\n                if (leftPresences.length > 0) {\n                    leaves[key] = leftPresences;\n                }\n            }\n            else {\n                joins[key] = newPresences;\n            }\n        });\n        return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);\n    }\n    /**\n     * Used to sync a diff of presence join and leave events from the\n     * server, as they happen.\n     *\n     * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n     * `onLeave` callbacks to react to a user joining or leaving from a\n     * device.\n     *\n     * @internal\n     */\n    static syncDiff(state, diff, onJoin, onLeave) {\n        const { joins, leaves } = {\n            joins: this.transformState(diff.joins),\n            leaves: this.transformState(diff.leaves),\n        };\n        if (!onJoin) {\n            onJoin = () => { };\n        }\n        if (!onLeave) {\n            onLeave = () => { };\n        }\n        this.map(joins, (key, newPresences) => {\n            var _a;\n            const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n            state[key] = this.cloneDeep(newPresences);\n            if (currentPresences.length > 0) {\n                const joinedPresenceRefs = state[key].map((m) => m.presence_ref);\n                const curPresences = currentPresences.filter((m) => joinedPresenceRefs.indexOf(m.presence_ref) < 0);\n                state[key].unshift(...curPresences);\n            }\n            onJoin(key, currentPresences, newPresences);\n        });\n        this.map(leaves, (key, leftPresences) => {\n            let currentPresences = state[key];\n            if (!currentPresences)\n                return;\n            const presenceRefsToRemove = leftPresences.map((m) => m.presence_ref);\n            currentPresences = currentPresences.filter((m) => presenceRefsToRemove.indexOf(m.presence_ref) < 0);\n            state[key] = currentPresences;\n            onLeave(key, currentPresences, leftPresences);\n            if (currentPresences.length === 0)\n                delete state[key];\n        });\n        return state;\n    }\n    /** @internal */\n    static map(obj, func) {\n        return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));\n    }\n    /**\n     * Remove 'metas' key\n     * Change 'phx_ref' to 'presence_ref'\n     * Remove 'phx_ref' and 'phx_ref_prev'\n     *\n     * @example\n     * // returns {\n     *  abc123: [\n     *    { presence_ref: '2', user_id: 1 },\n     *    { presence_ref: '3', user_id: 2 }\n     *  ]\n     * }\n     * RealtimePresence.transformState({\n     *  abc123: {\n     *    metas: [\n     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n     *      { phx_ref: '3', user_id: 2 }\n     *    ]\n     *  }\n     * })\n     *\n     * @internal\n     */\n    static transformState(state) {\n        state = this.cloneDeep(state);\n        return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n            const presences = state[key];\n            if ('metas' in presences) {\n                newState[key] = presences.metas.map((presence) => {\n                    presence['presence_ref'] = presence['phx_ref'];\n                    delete presence['phx_ref'];\n                    delete presence['phx_ref_prev'];\n                    return presence;\n                });\n            }\n            else {\n                newState[key] = presences;\n            }\n            return newState;\n        }, {});\n    }\n    /** @internal */\n    static cloneDeep(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    /** @internal */\n    onJoin(callback) {\n        this.caller.onJoin = callback;\n    }\n    /** @internal */\n    onLeave(callback) {\n        this.caller.onLeave = callback;\n    }\n    /** @internal */\n    onSync(callback) {\n        this.caller.onSync = callback;\n    }\n    /** @internal */\n    inPendingSyncState() {\n        return !this.joinRef || this.joinRef !== this.channel._joinRef();\n    }\n}\n//# sourceMappingURL=RealtimePresence.js.map","import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nimport * as Transformers from './lib/transformers';\nimport { httpEndpointURL } from './lib/transformers';\nexport var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\n(function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\n})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));\nexport var REALTIME_LISTEN_TYPES;\n(function (REALTIME_LISTEN_TYPES) {\n    REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\n    REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\n    REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\n    REALTIME_LISTEN_TYPES[\"SYSTEM\"] = \"system\";\n})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));\nexport var REALTIME_SUBSCRIBE_STATES;\n(function (REALTIME_SUBSCRIBE_STATES) {\n    REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n    REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n    REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n    REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));\nexport const REALTIME_CHANNEL_STATES = CHANNEL_STATES;\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n */\nexport default class RealtimeChannel {\n    constructor(\n    /** Topic name can be any string. */\n    topic, params = { config: {} }, socket) {\n        this.topic = topic;\n        this.params = params;\n        this.socket = socket;\n        this.bindings = {};\n        this.state = CHANNEL_STATES.closed;\n        this.joinedOnce = false;\n        this.pushBuffer = [];\n        this.subTopic = topic.replace(/^realtime:/i, '');\n        this.params.config = Object.assign({\n            broadcast: { ack: false, self: false },\n            presence: { key: '' },\n            private: false,\n        }, params.config);\n        this.timeout = this.socket.timeout;\n        this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n        this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);\n        this.joinPush.receive('ok', () => {\n            this.state = CHANNEL_STATES.joined;\n            this.rejoinTimer.reset();\n            this.pushBuffer.forEach((pushEvent) => pushEvent.send());\n            this.pushBuffer = [];\n        });\n        this._onClose(() => {\n            this.rejoinTimer.reset();\n            this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`);\n            this.state = CHANNEL_STATES.closed;\n            this.socket._remove(this);\n        });\n        this._onError((reason) => {\n            if (this._isLeaving() || this._isClosed()) {\n                return;\n            }\n            this.socket.log('channel', `error ${this.topic}`, reason);\n            this.state = CHANNEL_STATES.errored;\n            this.rejoinTimer.scheduleTimeout();\n        });\n        this.joinPush.receive('timeout', () => {\n            if (!this._isJoining()) {\n                return;\n            }\n            this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n            this.state = CHANNEL_STATES.errored;\n            this.rejoinTimer.scheduleTimeout();\n        });\n        this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {\n            this._trigger(this._replyEventName(ref), payload);\n        });\n        this.presence = new RealtimePresence(this);\n        this.broadcastEndpointURL =\n            httpEndpointURL(this.socket.endPoint) + '/api/broadcast';\n        this.private = this.params.config.private || false;\n    }\n    /** Subscribe registers your client with the server */\n    subscribe(callback, timeout = this.timeout) {\n        var _a, _b;\n        if (!this.socket.isConnected()) {\n            this.socket.connect();\n        }\n        if (this.joinedOnce) {\n            throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;\n        }\n        else {\n            const { config: { broadcast, presence, private: isPrivate }, } = this.params;\n            this._onError((e) => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, e));\n            this._onClose(() => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CLOSED));\n            const accessTokenPayload = {};\n            const config = {\n                broadcast,\n                presence,\n                postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map((r) => r.filter)) !== null && _b !== void 0 ? _b : [],\n                private: isPrivate,\n            };\n            if (this.socket.accessTokenValue) {\n                accessTokenPayload.access_token = this.socket.accessTokenValue;\n            }\n            this.updateJoinPayload(Object.assign({ config }, accessTokenPayload));\n            this.joinedOnce = true;\n            this._rejoin(timeout);\n            this.joinPush\n                .receive('ok', async ({ postgres_changes }) => {\n                var _a;\n                this.socket.setAuth();\n                if (postgres_changes === undefined) {\n                    callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);\n                    return;\n                }\n                else {\n                    const clientPostgresBindings = this.bindings.postgres_changes;\n                    const bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n                    const newPostgresBindings = [];\n                    for (let i = 0; i < bindingsLen; i++) {\n                        const clientPostgresBinding = clientPostgresBindings[i];\n                        const { filter: { event, schema, table, filter }, } = clientPostgresBinding;\n                        const serverPostgresFilter = postgres_changes && postgres_changes[i];\n                        if (serverPostgresFilter &&\n                            serverPostgresFilter.event === event &&\n                            serverPostgresFilter.schema === schema &&\n                            serverPostgresFilter.table === table &&\n                            serverPostgresFilter.filter === filter) {\n                            newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), { id: serverPostgresFilter.id }));\n                        }\n                        else {\n                            this.unsubscribe();\n                            callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error('mismatch between server and client bindings for postgres changes'));\n                            return;\n                        }\n                    }\n                    this.bindings.postgres_changes = newPostgresBindings;\n                    callback && callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);\n                    return;\n                }\n            })\n                .receive('error', (error) => {\n                callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n                return;\n            })\n                .receive('timeout', () => {\n                callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.TIMED_OUT);\n                return;\n            });\n        }\n        return this;\n    }\n    presenceState() {\n        return this.presence.state;\n    }\n    async track(payload, opts = {}) {\n        return await this.send({\n            type: 'presence',\n            event: 'track',\n            payload,\n        }, opts.timeout || this.timeout);\n    }\n    async untrack(opts = {}) {\n        return await this.send({\n            type: 'presence',\n            event: 'untrack',\n        }, opts);\n    }\n    on(type, filter, callback) {\n        return this._on(type, filter, callback);\n    }\n    /**\n     * Sends a message into the channel.\n     *\n     * @param args Arguments to send to channel\n     * @param args.type The type of event to send\n     * @param args.event The name of the event being sent\n     * @param args.payload Payload to be sent\n     * @param opts Options to be used during the send process\n     */\n    async send(args, opts = {}) {\n        var _a, _b;\n        if (!this._canPush() && args.type === 'broadcast') {\n            const { event, payload: endpoint_payload } = args;\n            const authorization = this.socket.accessTokenValue\n                ? `Bearer ${this.socket.accessTokenValue}`\n                : '';\n            const options = {\n                method: 'POST',\n                headers: {\n                    Authorization: authorization,\n                    apikey: this.socket.apiKey ? this.socket.apiKey : '',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    messages: [\n                        {\n                            topic: this.subTopic,\n                            event,\n                            payload: endpoint_payload,\n                            private: this.private,\n                        },\n                    ],\n                }),\n            };\n            try {\n                const response = await this._fetchWithTimeout(this.broadcastEndpointURL, options, (_a = opts.timeout) !== null && _a !== void 0 ? _a : this.timeout);\n                await ((_b = response.body) === null || _b === void 0 ? void 0 : _b.cancel());\n                return response.ok ? 'ok' : 'error';\n            }\n            catch (error) {\n                if (error.name === 'AbortError') {\n                    return 'timed out';\n                }\n                else {\n                    return 'error';\n                }\n            }\n        }\n        else {\n            return new Promise((resolve) => {\n                var _a, _b, _c;\n                const push = this._push(args.type, args, opts.timeout || this.timeout);\n                if (args.type === 'broadcast' && !((_c = (_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n                    resolve('ok');\n                }\n                push.receive('ok', () => resolve('ok'));\n                push.receive('error', () => resolve('error'));\n                push.receive('timeout', () => resolve('timed out'));\n            });\n        }\n    }\n    updateJoinPayload(payload) {\n        this.joinPush.updatePayload(payload);\n    }\n    /**\n     * Leaves the channel.\n     *\n     * Unsubscribes from server events, and instructs channel to terminate on server.\n     * Triggers onClose() hooks.\n     *\n     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n     * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n     */\n    unsubscribe(timeout = this.timeout) {\n        this.state = CHANNEL_STATES.leaving;\n        const onClose = () => {\n            this.socket.log('channel', `leave ${this.topic}`);\n            this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef());\n        };\n        this.rejoinTimer.reset();\n        // Destroy joinPush to avoid connection timeouts during unscription phase\n        this.joinPush.destroy();\n        return new Promise((resolve) => {\n            const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n            leavePush\n                .receive('ok', () => {\n                onClose();\n                resolve('ok');\n            })\n                .receive('timeout', () => {\n                onClose();\n                resolve('timed out');\n            })\n                .receive('error', () => {\n                resolve('error');\n            });\n            leavePush.send();\n            if (!this._canPush()) {\n                leavePush.trigger('ok', {});\n            }\n        });\n    }\n    /** @internal */\n    async _fetchWithTimeout(url, options, timeout) {\n        const controller = new AbortController();\n        const id = setTimeout(() => controller.abort(), timeout);\n        const response = await this.socket.fetch(url, Object.assign(Object.assign({}, options), { signal: controller.signal }));\n        clearTimeout(id);\n        return response;\n    }\n    /** @internal */\n    _push(event, payload, timeout = this.timeout) {\n        if (!this.joinedOnce) {\n            throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n        }\n        let pushEvent = new Push(this, event, payload, timeout);\n        if (this._canPush()) {\n            pushEvent.send();\n        }\n        else {\n            pushEvent.startTimeout();\n            this.pushBuffer.push(pushEvent);\n        }\n        return pushEvent;\n    }\n    /**\n     * Overridable message hook\n     *\n     * Receives all events for specialized message handling before dispatching to the channel callbacks.\n     * Must return the payload, modified or unmodified.\n     *\n     * @internal\n     */\n    _onMessage(_event, payload, _ref) {\n        return payload;\n    }\n    /** @internal */\n    _isMember(topic) {\n        return this.topic === topic;\n    }\n    /** @internal */\n    _joinRef() {\n        return this.joinPush.ref;\n    }\n    /** @internal */\n    _trigger(type, payload, ref) {\n        var _a, _b;\n        const typeLower = type.toLocaleLowerCase();\n        const { close, error, leave, join } = CHANNEL_EVENTS;\n        const events = [close, error, leave, join];\n        if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n            return;\n        }\n        let handledPayload = this._onMessage(typeLower, payload, ref);\n        if (payload && !handledPayload) {\n            throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n        }\n        if (['insert', 'update', 'delete'].includes(typeLower)) {\n            (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter((bind) => {\n                var _a, _b, _c;\n                return (((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' ||\n                    ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower);\n            }).map((bind) => bind.callback(handledPayload, ref));\n        }\n        else {\n            (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter((bind) => {\n                var _a, _b, _c, _d, _e, _f;\n                if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n                    if ('id' in bind) {\n                        const bindId = bind.id;\n                        const bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n                        return (bindId &&\n                            ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) &&\n                            (bindEvent === '*' ||\n                                (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) ===\n                                    ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase())));\n                    }\n                    else {\n                        const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n                        return (bindEvent === '*' ||\n                            bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase()));\n                    }\n                }\n                else {\n                    return bind.type.toLocaleLowerCase() === typeLower;\n                }\n            }).map((bind) => {\n                if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n                    const postgresChanges = handledPayload.data;\n                    const { schema, table, commit_timestamp, type, errors } = postgresChanges;\n                    const enrichedPayload = {\n                        schema: schema,\n                        table: table,\n                        commit_timestamp: commit_timestamp,\n                        eventType: type,\n                        new: {},\n                        old: {},\n                        errors: errors,\n                    };\n                    handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));\n                }\n                bind.callback(handledPayload, ref);\n            });\n        }\n    }\n    /** @internal */\n    _isClosed() {\n        return this.state === CHANNEL_STATES.closed;\n    }\n    /** @internal */\n    _isJoined() {\n        return this.state === CHANNEL_STATES.joined;\n    }\n    /** @internal */\n    _isJoining() {\n        return this.state === CHANNEL_STATES.joining;\n    }\n    /** @internal */\n    _isLeaving() {\n        return this.state === CHANNEL_STATES.leaving;\n    }\n    /** @internal */\n    _replyEventName(ref) {\n        return `chan_reply_${ref}`;\n    }\n    /** @internal */\n    _on(type, filter, callback) {\n        const typeLower = type.toLocaleLowerCase();\n        const binding = {\n            type: typeLower,\n            filter: filter,\n            callback: callback,\n        };\n        if (this.bindings[typeLower]) {\n            this.bindings[typeLower].push(binding);\n        }\n        else {\n            this.bindings[typeLower] = [binding];\n        }\n        return this;\n    }\n    /** @internal */\n    _off(type, filter) {\n        const typeLower = type.toLocaleLowerCase();\n        this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\n            var _a;\n            return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower &&\n                RealtimeChannel.isEqual(bind.filter, filter));\n        });\n        return this;\n    }\n    /** @internal */\n    static isEqual(obj1, obj2) {\n        if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n            return false;\n        }\n        for (const k in obj1) {\n            if (obj1[k] !== obj2[k]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /** @internal */\n    _rejoinUntilConnected() {\n        this.rejoinTimer.scheduleTimeout();\n        if (this.socket.isConnected()) {\n            this._rejoin();\n        }\n    }\n    /**\n     * Registers a callback that will be executed when the channel closes.\n     *\n     * @internal\n     */\n    _onClose(callback) {\n        this._on(CHANNEL_EVENTS.close, {}, callback);\n    }\n    /**\n     * Registers a callback that will be executed when the channel encounteres an error.\n     *\n     * @internal\n     */\n    _onError(callback) {\n        this._on(CHANNEL_EVENTS.error, {}, (reason) => callback(reason));\n    }\n    /**\n     * Returns `true` if the socket is connected and the channel has been joined.\n     *\n     * @internal\n     */\n    _canPush() {\n        return this.socket.isConnected() && this._isJoined();\n    }\n    /** @internal */\n    _rejoin(timeout = this.timeout) {\n        if (this._isLeaving()) {\n            return;\n        }\n        this.socket._leaveOpenTopic(this.topic);\n        this.state = CHANNEL_STATES.joining;\n        this.joinPush.resend(timeout);\n    }\n    /** @internal */\n    _getPayloadRecords(payload) {\n        const records = {\n            new: {},\n            old: {},\n        };\n        if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n            records.new = Transformers.convertChangeData(payload.columns, payload.record);\n        }\n        if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n            records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n        }\n        return records;\n    }\n}\n//# sourceMappingURL=RealtimeChannel.js.map","import { CHANNEL_EVENTS, CONNECTION_STATE, DEFAULT_HEADERS, DEFAULT_TIMEOUT, SOCKET_STATES, TRANSPORTS, VSN, WS_CLOSE_NORMAL, } from './lib/constants';\nimport Serializer from './lib/serializer';\nimport Timer from './lib/timer';\nimport { httpEndpointURL } from './lib/transformers';\nimport RealtimeChannel from './RealtimeChannel';\nconst noop = () => { };\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== 'undefined';\nconst WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`;\nexport default class RealtimeClient {\n    /**\n     * Initializes the Socket.\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket.\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers The optional headers to pass when connecting.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     * @param options.worker Use Web Worker to set a side flow. Defaults to false.\n     * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\n     */\n    constructor(endPoint, options) {\n        var _a;\n        this.accessTokenValue = null;\n        this.apiKey = null;\n        this.channels = [];\n        this.endPoint = '';\n        this.httpEndpoint = '';\n        this.headers = DEFAULT_HEADERS;\n        this.params = {};\n        this.timeout = DEFAULT_TIMEOUT;\n        this.heartbeatIntervalMs = 30000;\n        this.heartbeatTimer = undefined;\n        this.pendingHeartbeatRef = null;\n        this.ref = 0;\n        this.logger = noop;\n        this.conn = null;\n        this.sendBuffer = [];\n        this.serializer = new Serializer();\n        this.stateChangeCallbacks = {\n            open: [],\n            close: [],\n            error: [],\n            message: [],\n        };\n        this.accessToken = null;\n        /**\n         * Use either custom fetch, if provided, or default fetch to make HTTP requests\n         *\n         * @internal\n         */\n        this._resolveFetch = (customFetch) => {\n            let _fetch;\n            if (customFetch) {\n                _fetch = customFetch;\n            }\n            else if (typeof fetch === 'undefined') {\n                _fetch = (...args) => import('@supabase/node-fetch').then(({ default: fetch }) => fetch(...args));\n            }\n            else {\n                _fetch = fetch;\n            }\n            return (...args) => _fetch(...args);\n        };\n        this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n        this.httpEndpoint = httpEndpointURL(endPoint);\n        if (options === null || options === void 0 ? void 0 : options.transport) {\n            this.transport = options.transport;\n        }\n        else {\n            this.transport = null;\n        }\n        if (options === null || options === void 0 ? void 0 : options.params)\n            this.params = options.params;\n        if (options === null || options === void 0 ? void 0 : options.headers)\n            this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n        if (options === null || options === void 0 ? void 0 : options.timeout)\n            this.timeout = options.timeout;\n        if (options === null || options === void 0 ? void 0 : options.logger)\n            this.logger = options.logger;\n        if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs)\n            this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n        const accessTokenValue = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;\n        if (accessTokenValue) {\n            this.accessTokenValue = accessTokenValue;\n            this.apiKey = accessTokenValue;\n        }\n        this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs)\n            ? options.reconnectAfterMs\n            : (tries) => {\n                return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n            };\n        this.encode = (options === null || options === void 0 ? void 0 : options.encode)\n            ? options.encode\n            : (payload, callback) => {\n                return callback(JSON.stringify(payload));\n            };\n        this.decode = (options === null || options === void 0 ? void 0 : options.decode)\n            ? options.decode\n            : this.serializer.decode.bind(this.serializer);\n        this.reconnectTimer = new Timer(async () => {\n            this.disconnect();\n            this.connect();\n        }, this.reconnectAfterMs);\n        this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n        if (options === null || options === void 0 ? void 0 : options.worker) {\n            if (typeof window !== 'undefined' && !window.Worker) {\n                throw new Error('Web Worker is not supported');\n            }\n            this.worker = (options === null || options === void 0 ? void 0 : options.worker) || false;\n            this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;\n        }\n        this.accessToken = (options === null || options === void 0 ? void 0 : options.accessToken) || null;\n    }\n    /**\n     * Connects the socket, unless already connected.\n     */\n    connect() {\n        if (this.conn) {\n            return;\n        }\n        if (this.transport) {\n            this.conn = new this.transport(this.endpointURL(), undefined, {\n                headers: this.headers,\n            });\n            return;\n        }\n        if (NATIVE_WEBSOCKET_AVAILABLE) {\n            this.conn = new WebSocket(this.endpointURL());\n            this.setupConnection();\n            return;\n        }\n        this.conn = new WSWebSocketDummy(this.endpointURL(), undefined, {\n            close: () => {\n                this.conn = null;\n            },\n        });\n        import('ws').then(({ default: WS }) => {\n            this.conn = new WS(this.endpointURL(), undefined, {\n                headers: this.headers,\n            });\n            this.setupConnection();\n        });\n    }\n    /**\n     * Returns the URL of the websocket.\n     * @returns string The URL of the websocket.\n     */\n    endpointURL() {\n        return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));\n    }\n    /**\n     * Disconnects the socket.\n     *\n     * @param code A numeric status code to send on disconnect.\n     * @param reason A custom reason for the disconnect.\n     */\n    disconnect(code, reason) {\n        if (this.conn) {\n            this.conn.onclose = function () { }; // noop\n            if (code) {\n                this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n            }\n            else {\n                this.conn.close();\n            }\n            this.conn = null;\n            // remove open handles\n            this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n            this.reconnectTimer.reset();\n        }\n    }\n    /**\n     * Returns all created channels\n     */\n    getChannels() {\n        return this.channels;\n    }\n    /**\n     * Unsubscribes and removes a single channel\n     * @param channel A RealtimeChannel instance\n     */\n    async removeChannel(channel) {\n        const status = await channel.unsubscribe();\n        if (this.channels.length === 0) {\n            this.disconnect();\n        }\n        return status;\n    }\n    /**\n     * Unsubscribes and removes all channels\n     */\n    async removeAllChannels() {\n        const values_1 = await Promise.all(this.channels.map((channel) => channel.unsubscribe()));\n        this.disconnect();\n        return values_1;\n    }\n    /**\n     * Logs the message.\n     *\n     * For customized logging, `this.logger` can be overridden.\n     */\n    log(kind, msg, data) {\n        this.logger(kind, msg, data);\n    }\n    /**\n     * Returns the current state of the socket.\n     */\n    connectionState() {\n        switch (this.conn && this.conn.readyState) {\n            case SOCKET_STATES.connecting:\n                return CONNECTION_STATE.Connecting;\n            case SOCKET_STATES.open:\n                return CONNECTION_STATE.Open;\n            case SOCKET_STATES.closing:\n                return CONNECTION_STATE.Closing;\n            default:\n                return CONNECTION_STATE.Closed;\n        }\n    }\n    /**\n     * Returns `true` is the connection is open.\n     */\n    isConnected() {\n        return this.connectionState() === CONNECTION_STATE.Open;\n    }\n    channel(topic, params = { config: {} }) {\n        const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n        this.channels.push(chan);\n        return chan;\n    }\n    /**\n     * Push out a message if the socket is connected.\n     *\n     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n     */\n    push(data) {\n        const { topic, event, payload, ref } = data;\n        const callback = () => {\n            this.encode(data, (result) => {\n                var _a;\n                (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n            });\n        };\n        this.log('push', `${topic} ${event} (${ref})`, payload);\n        if (this.isConnected()) {\n            callback();\n        }\n        else {\n            this.sendBuffer.push(callback);\n        }\n    }\n    /**\n     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n     *\n     * If param is null it will use the `accessToken` callback function or the token set on the client.\n     *\n     * On callback used, it will set the value of the token internal to the client.\n     *\n     * @param token A JWT string to override the token set on the client.\n     */\n    async setAuth(token = null) {\n        let tokenToSend = token ||\n            (this.accessToken && (await this.accessToken())) ||\n            this.accessTokenValue;\n        if (tokenToSend) {\n            let parsed = null;\n            try {\n                parsed = JSON.parse(atob(tokenToSend.split('.')[1]));\n            }\n            catch (_error) { }\n            if (parsed && parsed.exp) {\n                let now = Math.floor(Date.now() / 1000);\n                let valid = now - parsed.exp < 0;\n                if (!valid) {\n                    this.log('auth', `InvalidJWTToken: Invalid value for JWT claim \"exp\" with value ${parsed.exp}`);\n                    return Promise.reject(`InvalidJWTToken: Invalid value for JWT claim \"exp\" with value ${parsed.exp}`);\n                }\n            }\n            this.accessTokenValue = tokenToSend;\n            this.channels.forEach((channel) => {\n                tokenToSend && channel.updateJoinPayload({ access_token: tokenToSend });\n                if (channel.joinedOnce && channel._isJoined()) {\n                    channel._push(CHANNEL_EVENTS.access_token, {\n                        access_token: tokenToSend,\n                    });\n                }\n            });\n        }\n    }\n    /**\n     * Sends a heartbeat message if the socket is connected.\n     */\n    async sendHeartbeat() {\n        var _a;\n        if (!this.isConnected()) {\n            return;\n        }\n        if (this.pendingHeartbeatRef) {\n            this.pendingHeartbeatRef = null;\n            this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n            (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n            return;\n        }\n        this.pendingHeartbeatRef = this._makeRef();\n        this.push({\n            topic: 'phoenix',\n            event: 'heartbeat',\n            payload: {},\n            ref: this.pendingHeartbeatRef,\n        });\n        this.setAuth();\n    }\n    /**\n     * Flushes send buffer\n     */\n    flushSendBuffer() {\n        if (this.isConnected() && this.sendBuffer.length > 0) {\n            this.sendBuffer.forEach((callback) => callback());\n            this.sendBuffer = [];\n        }\n    }\n    /**\n     * Return the next message ref, accounting for overflows\n     *\n     * @internal\n     */\n    _makeRef() {\n        let newRef = this.ref + 1;\n        if (newRef === this.ref) {\n            this.ref = 0;\n        }\n        else {\n            this.ref = newRef;\n        }\n        return this.ref.toString();\n    }\n    /**\n     * Unsubscribe from channels with the specified topic.\n     *\n     * @internal\n     */\n    _leaveOpenTopic(topic) {\n        let dupChannel = this.channels.find((c) => c.topic === topic && (c._isJoined() || c._isJoining()));\n        if (dupChannel) {\n            this.log('transport', `leaving duplicate topic \"${topic}\"`);\n            dupChannel.unsubscribe();\n        }\n    }\n    /**\n     * Removes a subscription from the socket.\n     *\n     * @param channel An open subscription.\n     *\n     * @internal\n     */\n    _remove(channel) {\n        this.channels = this.channels.filter((c) => c._joinRef() !== channel._joinRef());\n    }\n    /**\n     * Sets up connection handlers.\n     *\n     * @internal\n     */\n    setupConnection() {\n        if (this.conn) {\n            this.conn.binaryType = 'arraybuffer';\n            this.conn.onopen = () => this._onConnOpen();\n            this.conn.onerror = (error) => this._onConnError(error);\n            this.conn.onmessage = (event) => this._onConnMessage(event);\n            this.conn.onclose = (event) => this._onConnClose(event);\n        }\n    }\n    /** @internal */\n    _onConnMessage(rawMessage) {\n        this.decode(rawMessage.data, (msg) => {\n            let { topic, event, payload, ref } = msg;\n            if (ref && ref === this.pendingHeartbeatRef) {\n                this.pendingHeartbeatRef = null;\n            }\n            this.log('receive', `${payload.status || ''} ${topic} ${event} ${(ref && '(' + ref + ')') || ''}`, payload);\n            this.channels\n                .filter((channel) => channel._isMember(topic))\n                .forEach((channel) => channel._trigger(event, payload, ref));\n            this.stateChangeCallbacks.message.forEach((callback) => callback(msg));\n        });\n    }\n    /** @internal */\n    async _onConnOpen() {\n        this.log('transport', `connected to ${this.endpointURL()}`);\n        this.flushSendBuffer();\n        this.reconnectTimer.reset();\n        if (!this.worker) {\n            this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n            this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n        }\n        else {\n            if (this.workerUrl) {\n                this.log('worker', `starting worker for from ${this.workerUrl}`);\n            }\n            else {\n                this.log('worker', `starting default worker`);\n            }\n            const objectUrl = this._workerObjectUrl(this.workerUrl);\n            this.workerRef = new Worker(objectUrl);\n            this.workerRef.onerror = (error) => {\n                this.log('worker', 'worker error', error.message);\n                this.workerRef.terminate();\n            };\n            this.workerRef.onmessage = (event) => {\n                if (event.data.event === 'keepAlive') {\n                    this.sendHeartbeat();\n                }\n            };\n            this.workerRef.postMessage({\n                event: 'start',\n                interval: this.heartbeatIntervalMs,\n            });\n        }\n        this.stateChangeCallbacks.open.forEach((callback) => callback());\n    }\n    /** @internal */\n    _onConnClose(event) {\n        this.log('transport', 'close', event);\n        this._triggerChanError();\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.reconnectTimer.scheduleTimeout();\n        this.stateChangeCallbacks.close.forEach((callback) => callback(event));\n    }\n    /** @internal */\n    _onConnError(error) {\n        this.log('transport', error.message);\n        this._triggerChanError();\n        this.stateChangeCallbacks.error.forEach((callback) => callback(error));\n    }\n    /** @internal */\n    _triggerChanError() {\n        this.channels.forEach((channel) => channel._trigger(CHANNEL_EVENTS.error));\n    }\n    /** @internal */\n    _appendParams(url, params) {\n        if (Object.keys(params).length === 0) {\n            return url;\n        }\n        const prefix = url.match(/\\?/) ? '&' : '?';\n        const query = new URLSearchParams(params);\n        return `${url}${prefix}${query}`;\n    }\n    _workerObjectUrl(url) {\n        let result_url;\n        if (url) {\n            result_url = url;\n        }\n        else {\n            const blob = new Blob([WORKER_SCRIPT], { type: 'application/javascript' });\n            result_url = URL.createObjectURL(blob);\n        }\n        return result_url;\n    }\n}\nclass WSWebSocketDummy {\n    constructor(address, _protocols, options) {\n        this.binaryType = 'arraybuffer';\n        this.onclose = () => { };\n        this.onerror = () => { };\n        this.onmessage = () => { };\n        this.onopen = () => { };\n        this.readyState = SOCKET_STATES.connecting;\n        this.send = () => { };\n        this.url = null;\n        this.url = address;\n        this.close = options.close;\n    }\n}\n//# sourceMappingURL=RealtimeClient.js.map","import RealtimeClient from './RealtimeClient';\nimport RealtimeChannel, { REALTIME_LISTEN_TYPES, REALTIME_POSTGRES_CHANGES_LISTEN_EVENT, REALTIME_SUBSCRIBE_STATES, REALTIME_CHANNEL_STATES, } from './RealtimeChannel';\nimport RealtimePresence, { REALTIME_PRESENCE_LISTEN_EVENTS, } from './RealtimePresence';\nexport { RealtimePresence, RealtimeChannel, RealtimeClient, REALTIME_LISTEN_TYPES, REALTIME_POSTGRES_CHANGES_LISTEN_EVENT, REALTIME_PRESENCE_LISTEN_EVENTS, REALTIME_SUBSCRIBE_STATES, REALTIME_CHANNEL_STATES, };\n//# sourceMappingURL=index.js.map","export class StorageError extends Error {\n    constructor(message) {\n        super(message);\n        this.__isStorageError = true;\n        this.name = 'StorageError';\n    }\n}\nexport function isStorageError(error) {\n    return typeof error === 'object' && error !== null && '__isStorageError' in error;\n}\nexport class StorageApiError extends StorageError {\n    constructor(message, status) {\n        super(message);\n        this.name = 'StorageApiError';\n        this.status = status;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            status: this.status,\n        };\n    }\n}\nexport class StorageUnknownError extends StorageError {\n    constructor(message, originalError) {\n        super(message);\n        this.name = 'StorageUnknownError';\n        this.originalError = originalError;\n    }\n}\n//# sourceMappingURL=errors.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport const resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === 'undefined') {\n        _fetch = (...args) => import('@supabase/node-fetch').then(({ default: fetch }) => fetch(...args));\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\nexport const resolveResponse = () => __awaiter(void 0, void 0, void 0, function* () {\n    if (typeof Response === 'undefined') {\n        // @ts-ignore\n        return (yield import('@supabase/node-fetch')).Response;\n    }\n    return Response;\n});\nexport const recursiveToCamel = (item) => {\n    if (Array.isArray(item)) {\n        return item.map((el) => recursiveToCamel(el));\n    }\n    else if (typeof item === 'function' || item !== Object(item)) {\n        return item;\n    }\n    const result = {};\n    Object.entries(item).forEach(([key, value]) => {\n        const newKey = key.replace(/([-_][a-z])/gi, (c) => c.toUpperCase().replace(/[-_]/g, ''));\n        result[newKey] = recursiveToCamel(value);\n    });\n    return result;\n};\n//# sourceMappingURL=helpers.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StorageApiError, StorageUnknownError } from './errors';\nimport { resolveResponse } from './helpers';\nconst _getErrorMessage = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\nconst handleError = (error, reject, options) => __awaiter(void 0, void 0, void 0, function* () {\n    const Res = yield resolveResponse();\n    if (error instanceof Res && !(options === null || options === void 0 ? void 0 : options.noResolveJson)) {\n        error\n            .json()\n            .then((err) => {\n            reject(new StorageApiError(_getErrorMessage(err), error.status || 500));\n        })\n            .catch((err) => {\n            reject(new StorageUnknownError(_getErrorMessage(err), err));\n        });\n    }\n    else {\n        reject(new StorageUnknownError(_getErrorMessage(error), error));\n    }\n});\nconst _getRequestParams = (method, options, parameters, body) => {\n    const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };\n    if (method === 'GET') {\n        return params;\n    }\n    params.headers = Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers);\n    if (body) {\n        params.body = JSON.stringify(body);\n    }\n    return Object.assign(Object.assign({}, params), parameters);\n};\nfunction _handleRequest(fetcher, method, url, options, parameters, body) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => {\n            fetcher(url, _getRequestParams(method, options, parameters, body))\n                .then((result) => {\n                if (!result.ok)\n                    throw result;\n                if (options === null || options === void 0 ? void 0 : options.noResolveJson)\n                    return result;\n                return result.json();\n            })\n                .then((data) => resolve(data))\n                .catch((error) => handleError(error, reject, options));\n        });\n    });\n}\nexport function get(fetcher, url, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'GET', url, options, parameters);\n    });\n}\nexport function post(fetcher, url, body, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'POST', url, options, parameters, body);\n    });\n}\nexport function put(fetcher, url, body, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'PUT', url, options, parameters, body);\n    });\n}\nexport function head(fetcher, url, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'HEAD', url, Object.assign(Object.assign({}, options), { noResolveJson: true }), parameters);\n    });\n}\nexport function remove(fetcher, url, body, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'DELETE', url, options, parameters, body);\n    });\n}\n//# sourceMappingURL=fetch.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isStorageError, StorageError, StorageUnknownError } from '../lib/errors';\nimport { get, head, post, remove } from '../lib/fetch';\nimport { recursiveToCamel, resolveFetch } from '../lib/helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n        column: 'name',\n        order: 'asc',\n    },\n};\nconst DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false,\n};\nexport default class StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n        this.url = url;\n        this.headers = headers;\n        this.bucketId = bucketId;\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                let headers = Object.assign(Object.assign({}, this.headers), (method === 'POST' && { 'x-upsert': String(options.upsert) }));\n                const metadata = options.metadata;\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    if (metadata) {\n                        body.append('metadata', this.encodeMetadata(metadata));\n                    }\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                    if (metadata) {\n                        body.append('metadata', this.encodeMetadata(metadata));\n                    }\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                    if (metadata) {\n                        headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n                    }\n                }\n                if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n                    headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n                }\n                const cleanPath = this._removeEmptyFolders(path);\n                const _path = this._getFinalPath(cleanPath);\n                const res = yield this.fetch(`${this.url}/object/${_path}`, Object.assign({ method, body: body, headers }, ((options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {})));\n                const data = yield res.json();\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath, id: data.Id, fullPath: data.Key },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = data;\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    upload(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadToSignedUrl(path, token, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cleanPath = this._removeEmptyFolders(path);\n            const _path = this._getFinalPath(cleanPath);\n            const url = new URL(this.url + `/object/upload/sign/${_path}`);\n            url.searchParams.set('token', token);\n            try {\n                let body;\n                const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), { 'x-upsert': String(options.upsert) });\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const res = yield this.fetch(url.toString(), {\n                    method: 'PUT',\n                    body: body,\n                    headers,\n                });\n                const data = yield res.json();\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath, fullPath: data.Key },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = data;\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for 2 hours.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n     */\n    createSignedUploadUrl(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                const headers = Object.assign({}, this.headers);\n                if (options === null || options === void 0 ? void 0 : options.upsert) {\n                    headers['x-upsert'] = 'true';\n                }\n                const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers });\n                const url = new URL(this.url + data.url);\n                const token = url.searchParams.get('token');\n                if (!token) {\n                    throw new StorageError('No token returned by API');\n                }\n                return { data: { signedUrl: url.toString(), path, token }, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    update(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     * @param options The destination options.\n     */\n    move(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/move`, {\n                    bucketId: this.bucketId,\n                    sourceKey: fromPath,\n                    destinationKey: toPath,\n                    destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     * @param options The destination options.\n     */\n    copy(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/copy`, {\n                    bucketId: this.bucketId,\n                    sourceKey: fromPath,\n                    destinationKey: toPath,\n                    destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket,\n                }, { headers: this.headers });\n                return { data: { path: data.Key }, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    createSignedUrl(path, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, ((options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {})), { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n                data = { signedUrl };\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n    createSignedUrls(paths, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                return {\n                    data: data.map((datum) => (Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL\n                            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n                            : null }))),\n                    error: null,\n                };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    download(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n            const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n            const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n            const queryString = transformationQuery ? `?${transformationQuery}` : '';\n            try {\n                const _path = this._getFinalPath(path);\n                const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n                    headers: this.headers,\n                    noResolveJson: true,\n                });\n                const data = yield res.blob();\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the details of an existing file.\n     * @param path\n     */\n    info(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _path = this._getFinalPath(path);\n            try {\n                const data = yield get(this.fetch, `${this.url}/object/info/${_path}`, {\n                    headers: this.headers,\n                });\n                return { data: recursiveToCamel(data), error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Checks the existence of a file.\n     * @param path\n     */\n    exists(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _path = this._getFinalPath(path);\n            try {\n                yield head(this.fetch, `${this.url}/object/${_path}`, {\n                    headers: this.headers,\n                });\n                return { data: true, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error) && error instanceof StorageUnknownError) {\n                    const originalError = error.originalError;\n                    if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n                        return { data: false, error };\n                    }\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    getPublicUrl(path, options) {\n        const _path = this._getFinalPath(path);\n        const _queryString = [];\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n            ? `download=${options.download === true ? '' : options.download}`\n            : '';\n        if (downloadQueryParam !== '') {\n            _queryString.push(downloadQueryParam);\n        }\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        const renderPath = wantsTransformation ? 'render/image' : 'object';\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        if (transformationQuery !== '') {\n            _queryString.push(transformationQuery);\n        }\n        let queryString = _queryString.join('&');\n        if (queryString !== '') {\n            queryString = `?${queryString}`;\n        }\n        return {\n            data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n        };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n    remove(paths) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     */\n    list(path, options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || '' });\n                const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    encodeMetadata(metadata) {\n        return JSON.stringify(metadata);\n    }\n    toBase64(data) {\n        if (typeof Buffer !== 'undefined') {\n            return Buffer.from(data).toString('base64');\n        }\n        return btoa(data);\n    }\n    _getFinalPath(path) {\n        return `${this.bucketId}/${path}`;\n    }\n    _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n    transformOptsToQueryString(transform) {\n        const params = [];\n        if (transform.width) {\n            params.push(`width=${transform.width}`);\n        }\n        if (transform.height) {\n            params.push(`height=${transform.height}`);\n        }\n        if (transform.resize) {\n            params.push(`resize=${transform.resize}`);\n        }\n        if (transform.format) {\n            params.push(`format=${transform.format}`);\n        }\n        if (transform.quality) {\n            params.push(`quality=${transform.quality}`);\n        }\n        return params.join('&');\n    }\n}\n//# sourceMappingURL=StorageFileApi.js.map","// generated by genversion\nexport const version = '2.7.1';\n//# sourceMappingURL=version.js.map","import { version } from './version';\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `storage-js/${version}` };\n//# sourceMappingURL=constants.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DEFAULT_HEADERS } from '../lib/constants';\nimport { isStorageError } from '../lib/errors';\nimport { get, post, put, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nexport default class StorageBucketApi {\n    constructor(url, headers = {}, fetch) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Retrieves the details of all Storage buckets within an existing project.\n     */\n    listBuckets() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n    getBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     * @returns newly created bucket id\n     */\n    createBucket(id, options = {\n        public: false,\n    }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket`, {\n                    id,\n                    name: id,\n                    public: options.public,\n                    file_size_limit: options.fileSizeLimit,\n                    allowed_mime_types: options.allowedMimeTypes,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Updates a Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are updating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     */\n    updateBucket(id, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {\n                    id,\n                    name: id,\n                    public: options.public,\n                    file_size_limit: options.fileSizeLimit,\n                    allowed_mime_types: options.allowedMimeTypes,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n    emptyBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n    deleteBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n}\n//# sourceMappingURL=StorageBucketApi.js.map","import StorageFileApi from './packages/StorageFileApi';\nimport StorageBucketApi from './packages/StorageBucketApi';\nexport class StorageClient extends StorageBucketApi {\n    constructor(url, headers = {}, fetch) {\n        super(url, headers, fetch);\n    }\n    /**\n     * Perform file operation in a bucket.\n     *\n     * @param id The bucket id to operate on.\n     */\n    from(id) {\n        return new StorageFileApi(this.url, this.headers, id, this.fetch);\n    }\n}\n//# sourceMappingURL=StorageClient.js.map","export const version = '2.48.1';\n//# sourceMappingURL=version.js.map","import { version } from './version';\nlet JS_ENV = '';\n// @ts-ignore\nif (typeof Deno !== 'undefined') {\n    JS_ENV = 'deno';\n}\nelse if (typeof document !== 'undefined') {\n    JS_ENV = 'web';\n}\nelse if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    JS_ENV = 'react-native';\n}\nelse {\n    JS_ENV = 'node';\n}\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `supabase-js-${JS_ENV}/${version}` };\nexport const DEFAULT_GLOBAL_OPTIONS = {\n    headers: DEFAULT_HEADERS,\n};\nexport const DEFAULT_DB_OPTIONS = {\n    schema: 'public',\n};\nexport const DEFAULT_AUTH_OPTIONS = {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    flowType: 'implicit',\n};\nexport const DEFAULT_REALTIME_OPTIONS = {};\n//# sourceMappingURL=constants.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// @ts-ignore\nimport nodeFetch, { Headers as NodeFetchHeaders } from '@supabase/node-fetch';\nexport const resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === 'undefined') {\n        _fetch = nodeFetch;\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\nexport const resolveHeadersConstructor = () => {\n    if (typeof Headers === 'undefined') {\n        return NodeFetchHeaders;\n    }\n    return Headers;\n};\nexport const fetchWithAuth = (supabaseKey, getAccessToken, customFetch) => {\n    const fetch = resolveFetch(customFetch);\n    const HeadersConstructor = resolveHeadersConstructor();\n    return (input, init) => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        const accessToken = (_a = (yield getAccessToken())) !== null && _a !== void 0 ? _a : supabaseKey;\n        let headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);\n        if (!headers.has('apikey')) {\n            headers.set('apikey', supabaseKey);\n        }\n        if (!headers.has('Authorization')) {\n            headers.set('Authorization', `Bearer ${accessToken}`);\n        }\n        return fetch(input, Object.assign(Object.assign({}, init), { headers }));\n    });\n};\n//# sourceMappingURL=fetch.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport function uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\nexport function stripTrailingSlash(url) {\n    return url.replace(/\\/$/, '');\n}\nexport const isBrowser = () => typeof window !== 'undefined';\nexport function applySettingDefaults(options, defaults) {\n    const { db: dbOptions, auth: authOptions, realtime: realtimeOptions, global: globalOptions, } = options;\n    const { db: DEFAULT_DB_OPTIONS, auth: DEFAULT_AUTH_OPTIONS, realtime: DEFAULT_REALTIME_OPTIONS, global: DEFAULT_GLOBAL_OPTIONS, } = defaults;\n    const result = {\n        db: Object.assign(Object.assign({}, DEFAULT_DB_OPTIONS), dbOptions),\n        auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), authOptions),\n        realtime: Object.assign(Object.assign({}, DEFAULT_REALTIME_OPTIONS), realtimeOptions),\n        global: Object.assign(Object.assign({}, DEFAULT_GLOBAL_OPTIONS), globalOptions),\n        accessToken: () => __awaiter(this, void 0, void 0, function* () { return ''; }),\n    };\n    if (options.accessToken) {\n        result.accessToken = options.accessToken;\n    }\n    else {\n        // hack around Required<>\n        delete result.accessToken;\n    }\n    return result;\n}\n//# sourceMappingURL=helpers.js.map","import { AuthClient } from '@supabase/auth-js';\nexport class SupabaseAuthClient extends AuthClient {\n    constructor(options) {\n        super(options);\n    }\n}\n//# sourceMappingURL=SupabaseAuthClient.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient, } from '@supabase/postgrest-js';\nimport { RealtimeClient, } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_GLOBAL_OPTIONS, DEFAULT_DB_OPTIONS, DEFAULT_AUTH_OPTIONS, DEFAULT_REALTIME_OPTIONS, } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n    /**\n     * Create a new client for use in the browser.\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n     * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.realtime Options passed along to realtime-js constructor.\n     * @param options.global.fetch A custom fetch implementation.\n     * @param options.global.headers Any additional headers to send with each network request.\n     */\n    constructor(supabaseUrl, supabaseKey, options) {\n        var _a, _b, _c;\n        this.supabaseUrl = supabaseUrl;\n        this.supabaseKey = supabaseKey;\n        if (!supabaseUrl)\n            throw new Error('supabaseUrl is required.');\n        if (!supabaseKey)\n            throw new Error('supabaseKey is required.');\n        const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n        this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws');\n        this.authUrl = `${_supabaseUrl}/auth/v1`;\n        this.storageUrl = `${_supabaseUrl}/storage/v1`;\n        this.functionsUrl = `${_supabaseUrl}/functions/v1`;\n        // default storage key uses the supabase project ref as a namespace\n        const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`;\n        const DEFAULTS = {\n            db: DEFAULT_DB_OPTIONS,\n            realtime: DEFAULT_REALTIME_OPTIONS,\n            auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),\n            global: DEFAULT_GLOBAL_OPTIONS,\n        };\n        const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n        this.storageKey = (_a = settings.auth.storageKey) !== null && _a !== void 0 ? _a : '';\n        this.headers = (_b = settings.global.headers) !== null && _b !== void 0 ? _b : {};\n        if (!settings.accessToken) {\n            this.auth = this._initSupabaseAuthClient((_c = settings.auth) !== null && _c !== void 0 ? _c : {}, this.headers, settings.global.fetch);\n        }\n        else {\n            this.accessToken = settings.accessToken;\n            this.auth = new Proxy({}, {\n                get: (_, prop) => {\n                    throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(prop)} is not possible`);\n                },\n            });\n        }\n        this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global.fetch);\n        this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers, accessToken: this._getAccessToken.bind(this) }, settings.realtime));\n        this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n            headers: this.headers,\n            schema: settings.db.schema,\n            fetch: this.fetch,\n        });\n        if (!settings.accessToken) {\n            this._listenForAuthEvents();\n        }\n    }\n    /**\n     * Supabase Functions allows you to deploy and invoke edge functions.\n     */\n    get functions() {\n        return new FunctionsClient(this.functionsUrl, {\n            headers: this.headers,\n            customFetch: this.fetch,\n        });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n    get storage() {\n        return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        return this.rest.from(relation);\n    }\n    // NOTE: signatures must be kept in sync with PostgrestClient.schema\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n    schema(schema) {\n        return this.rest.schema(schema);\n    }\n    // NOTE: signatures must be kept in sync with PostgrestClient.rpc\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, options = {}) {\n        return this.rest.rpc(fn, args, options);\n    }\n    /**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */\n    channel(name, opts = { config: {} }) {\n        return this.realtime.channel(name, opts);\n    }\n    /**\n     * Returns all Realtime channels.\n     */\n    getChannels() {\n        return this.realtime.getChannels();\n    }\n    /**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */\n    removeChannel(channel) {\n        return this.realtime.removeChannel(channel);\n    }\n    /**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */\n    removeAllChannels() {\n        return this.realtime.removeAllChannels();\n    }\n    _getAccessToken() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.accessToken) {\n                return yield this.accessToken();\n            }\n            const { data } = yield this.auth.getSession();\n            return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\n        });\n    }\n    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey, flowType, lock, debug, }, headers, fetch) {\n        const authHeaders = {\n            Authorization: `Bearer ${this.supabaseKey}`,\n            apikey: `${this.supabaseKey}`,\n        };\n        return new SupabaseAuthClient({\n            url: this.authUrl,\n            headers: Object.assign(Object.assign({}, authHeaders), headers),\n            storageKey: storageKey,\n            autoRefreshToken,\n            persistSession,\n            detectSessionInUrl,\n            storage,\n            flowType,\n            lock,\n            debug,\n            fetch,\n            // auth checks if there is a custom authorizaiton header using this flag\n            // so it knows whether to return an error when getUser is called with no session\n            hasCustomAuthorizationHeader: 'Authorization' in this.headers,\n        });\n    }\n    _initRealtimeClient(options) {\n        return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));\n    }\n    _listenForAuthEvents() {\n        let data = this.auth.onAuthStateChange((event, session) => {\n            this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\n        });\n        return data;\n    }\n    _handleTokenChanged(event, source, token) {\n        if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n            this.changedAccessToken !== token) {\n            this.changedAccessToken = token;\n        }\n        else if (event === 'SIGNED_OUT') {\n            this.realtime.setAuth();\n            if (source == 'STORAGE')\n                this.auth.signOut();\n            this.changedAccessToken = undefined;\n        }\n    }\n}\n//# sourceMappingURL=SupabaseClient.js.map","import SupabaseClient from './SupabaseClient';\nexport * from '@supabase/auth-js';\nexport { PostgrestError, } from '@supabase/postgrest-js';\nexport { FunctionsHttpError, FunctionsFetchError, FunctionsRelayError, FunctionsError, FunctionRegion, } from '@supabase/functions-js';\nexport * from '@supabase/realtime-js';\nexport { default as SupabaseClient } from './SupabaseClient';\n/**\n * Creates a new Supabase Client.\n */\nexport const createClient = (supabaseUrl, supabaseKey, options) => {\n    return new SupabaseClient(supabaseUrl, supabaseKey, options);\n};\n//# sourceMappingURL=index.js.map","'use strict';\n\nmodule.exports = function () {\n  throw new Error(\n    'ws does not work in the browser. Browser clients must use the native ' +\n      'WebSocket object'\n  );\n};\n"],"names":["globalObject","getGlobal","self","window","__webpack_require__","g","fetch","__WEBPACK_DEFAULT_EXPORT__","bind","Headers","Request","Response","__importDefault","mod","__esModule","Object","defineProperty","exports","value","node_fetch_1","PostgrestError_1","PostgrestBuilder","constructor","builder","shouldThrowOnError","method","url","headers","schema","body","signal","isMaybeSingle","default","throwOnError","setHeader","name","assign","then","onfulfilled","onrejected","undefined","includes","res","_fetch","toString","JSON","stringify","_a","_b","_c","error","data","count","status","statusText","ok","text","parse","countHeader","match","contentRange","get","split","length","parseInt","Array","isArray","code","details","hint","message","_d","catch","fetchError","stack","PostgrestQueryBuilder_1","PostgrestFilterBuilder_1","constants_1","PostgrestClient","DEFAULT_HEADERS","schemaName","from","relation","URL","rpc","fn","args","head","entries","filter","_","map","join","forEach","searchParams","append","allowEmpty","PostgrestError","Error","context","PostgrestTransformBuilder_1","PostgrestFilterBuilder","eq","column","neq","gt","gte","lt","lte","like","pattern","likeAllOf","patterns","likeAnyOf","ilike","ilikeAllOf","ilikeAnyOf","is","in","values","cleanedValues","Set","s","test","contains","containedBy","rangeGt","range","rangeGte","rangeLt","rangeLte","rangeAdjacent","overlaps","textSearch","query","config","type","typePart","configPart","not","operator","or","filters","foreignTable","referencedTable","key","PostgrestQueryBuilder","select","columns","quoted","cleanedColumns","c","set","insert","defaultToNull","prefersHeaders","push","reduce","acc","x","concat","keys","uniqueColumns","upsert","onConflict","ignoreDuplicates","update","delete","unshift","PostgrestBuilder_1","PostgrestTransformBuilder","order","ascending","nullsFirst","existingOrder","limit","to","keyOffset","keyLimit","abortSignal","single","maybeSingle","csv","geojson","explain","analyze","verbose","settings","buffers","wal","format","options","Boolean","forMediatype","rollback","trim","returns","version_1","version","PostgrestClient_1","SOCKET_STATES","constants_CHANNEL_STATES","CHANNEL_EVENTS","TRANSPORTS","CONNECTION_STATE","PostgresTypes","REALTIME_PRESENCE_LISTEN_EVENTS","REALTIME_POSTGRES_CHANGES_LISTEN_EVENT","REALTIME_LISTEN_TYPES","REALTIME_SUBSCRIBE_STATES","CHANNEL_STATES","Serializer","HEADER_LENGTH","decode","rawPayload","callback","ArrayBuffer","_binaryDecode","buffer","view","DataView","decoder","TextDecoder","_decodeBroadcast","topicSize","getUint8","eventSize","offset","topic","slice","event","ref","payload","byteLength","Timer","timerCalc","timer","tries","reset","clearTimeout","scheduleTimeout","setTimeout","convertChangeData","record","skipTypes","rec_key","convertColumn","columnName","find","colType","convertCell","noop","charAt","toArray","bool","toBoolean","float4","float8","int2","int4","int8","numeric","oid","toNumber","json","jsonb","toJson","timestamp","toTimestampString","abstime","date","daterange","int4range","int8range","money","reltime","time","timestamptz","timetz","tsrange","tstzrange","parsedValue","parseFloat","Number","isNaN","console","log","lastIdx","closeBrace","openBrace","arr","valTrim","val","replace","httpEndpointURL","socketUrl","Push","channel","timeout","sent","timeoutTimer","receivedResp","recHooks","refEvent","resend","_cancelRefEvent","send","_hasReceived","startTimeout","socket","join_ref","_joinRef","updatePayload","receive","response","_makeRef","_replyEventName","_on","_cancelTimeout","_matchReceive","trigger","_trigger","destroy","_off","h","RealtimePresence","opts","state","pendingDiffs","joinRef","caller","onJoin","onLeave","onSync","events","diff","syncState","newState","syncDiff","inPendingSyncState","currentPresences","newPresences","leftPresences","currentState","cloneDeep","transformedState","transformState","joins","leaves","presences","newPresenceRefs","m","presence_ref","curPresenceRefs","joinedPresences","indexOf","joinedPresenceRefs","curPresences","presenceRefsToRemove","obj","func","getOwnPropertyNames","metas","presence","RealtimeChannel","params","bindings","closed","joinedOnce","pushBuffer","subTopic","broadcast","ack","private","joinPush","rejoinTimer","_rejoinUntilConnected","reconnectAfterMs","joined","pushEvent","_onClose","_remove","_onError","_isLeaving","_isClosed","reason","errored","_isJoining","reply","broadcastEndpointURL","endPoint","subscribe","isConnected","connect","isPrivate","CHANNEL_ERROR","e","CLOSED","accessTokenPayload","postgres_changes","r","accessTokenValue","access_token","updateJoinPayload","_rejoin","setAuth","SUBSCRIBED","clientPostgresBindings","bindingsLen","newPostgresBindings","i","clientPostgresBinding","table","serverPostgresFilter","id","unsubscribe","TIMED_OUT","presenceState","track","untrack","on","_canPush","Promise","_push","resolve","endpoint_payload","Authorization","apikey","apiKey","messages","_fetchWithTimeout","cancel","leaving","onClose","close","leavePush","leave","controller","AbortController","abort","_onMessage","_event","_ref","_isMember","typeLower","toLocaleLowerCase","handledPayload","_e","_f","bindId","bindEvent","ids","postgresChanges","commit_timestamp","errors","eventType","new","old","_getPayloadRecords","_isJoined","joining","binding","isEqual","obj1","obj2","k","_leaveOpenTopic","records","old_record","RealtimeClient_noop","NATIVE_WEBSOCKET_AVAILABLE","WebSocket","WORKER_SCRIPT","RealtimeClient","channels","httpEndpoint","heartbeatIntervalMs","heartbeatTimer","pendingHeartbeatRef","logger","conn","sendBuffer","serializer","stateChangeCallbacks","open","accessToken","_resolveFetch","customFetch","websocket","transport","encode","reconnectTimer","disconnect","worker","Worker","workerUrl","endpointURL","setupConnection","WSWebSocketDummy","t","WS","_appendParams","vsn","onclose","clearInterval","getChannels","removeChannel","removeAllChannels","values_1","all","kind","msg","connectionState","readyState","connecting","Connecting","Open","closing","Closing","Closed","chan","result","token","tokenToSend","parsed","atob","_error","exp","now","floor","Date","reject","sendHeartbeat","flushSendBuffer","newRef","dupChannel","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","_onConnMessage","_onConnClose","rawMessage","objectUrl","_workerObjectUrl","workerRef","terminate","postMessage","interval","setInterval","_triggerChanError","prefix","URLSearchParams","result_url","blob","Blob","createObjectURL","address","_protocols","StorageError","__isStorageError","isStorageError","StorageApiError","toJSON","StorageUnknownError","originalError","resolveFetch","resolveResponse","__awaiter","thisArg","_arguments","P","generator","fulfilled","step","next","rejected","done","adopt","apply","recursiveToCamel","item","el","toUpperCase","fetch_awaiter","_getErrorMessage","err","error_description","handleError","noResolveJson","_getRequestParams","parameters","_handleRequest","fetcher","post","remove","StorageFileApi_awaiter","DEFAULT_SEARCH_OPTIONS","sortBy","DEFAULT_FILE_OPTIONS","cacheControl","contentType","StorageFileApi","bucketId","uploadOrUpdate","path","fileBody","fileOptions","String","metadata","FormData","encodeMetadata","toBase64","cleanPath","_removeEmptyFolders","_path","_getFinalPath","duplex","Id","fullPath","Key","upload","uploadToSignedUrl","createSignedUploadUrl","signedUrl","move","fromPath","toPath","sourceKey","destinationKey","destinationBucket","copy","createSignedUrl","expiresIn","transform","downloadQueryParam","download","encodeURI","signedURL","createSignedUrls","paths","datum","wantsTransformation","transformationQuery","transformOptsToQueryString","queryString","info","exists","getPublicUrl","_queryString","publicUrl","prefixes","list","Buffer","btoa","width","height","resize","quality","constants_DEFAULT_HEADERS","StorageBucketApi_awaiter","StorageBucketApi","listBuckets","getBucket","createBucket","public","file_size_limit","fileSizeLimit","allowed_mime_types","allowedMimeTypes","updateBucket","put","emptyBucket","deleteBucket","StorageClient","JS_ENV","Deno","document","navigator","product","DEFAULT_GLOBAL_OPTIONS","DEFAULT_DB_OPTIONS","DEFAULT_AUTH_OPTIONS","autoRefreshToken","persistSession","detectSessionInUrl","flowType","DEFAULT_REALTIME_OPTIONS","fetch_resolveFetch","browser","resolveHeadersConstructor","fetchWithAuth","supabaseKey","getAccessToken","HeadersConstructor","input","init","lib_fetch_awaiter","has","SupabaseAuthClient","dist_module","LY","SupabaseClient","supabaseUrl","_supabaseUrl","realtimeUrl","authUrl","storageUrl","functionsUrl","defaultStorageKey","hostname","applySettingDefaults","defaults","db","dbOptions","auth","authOptions","realtime","realtimeOptions","global","globalOptions","storageKey","Proxy","prop","_initSupabaseAuthClient","_getAccessToken","_initRealtimeClient","rest","_listenForAuthEvents","functions","FunctionsClient","b","storage","getSession","session","lock","debug","authHeaders","hasCustomAuthorizationHeader","onAuthStateChange","_handleTokenChanged","source","changedAccessToken","signOut","createClient","module"],"sourceRoot":""}